{
  "info": {
    "title": "Bella-OpenAPI",
    "version": "1.0"
  },
  "paths": {
    "/v1/log": {
      "post": {
        "tags": [
          "Logging"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Log recording successful"
          }
        },
        "description": "Records endpoint processing log data for detailed API call information and statistics",
        "operationId": "record",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointProcessData"
              }
            }
          },
          "required": true,
          "description": "Endpoint processing data containing complete API call information"
        }
      }
    },
    "/v1/route": {
      "post": {
        "tags": [
          "Routing"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RouteResult"
                }
              }
            },
            "description": "Routing successful, returns selected channel details"
          }
        },
        "description": "Routes based on API key, endpoint and model information, returns the most suitable channel information",
        "operationId": "route",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RouteRequest"
              }
            }
          },
          "required": true,
          "description": "Routing request parameters containing API key, endpoint and model information"
        }
      }
    },
    "/v1/metrics": {
      "get": {
        "tags": [
          "Metrics Query"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetricsQueryResult"
                  }
                }
              }
            },
            "description": "Successfully returns list of metrics query results"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "endpoint",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "API endpoint address to query metrics for"
          },
          {
            "in": "query",
            "name": "channelType",
            "schema": {
              "type": "string",
              "default": "model"
            },
            "required": false,
            "description": "Channel type, used to specify whether query scope is by model or by endpoint"
          },
          {
            "in": "query",
            "name": "model",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Specify the model name to query metrics for, used when channelType is model"
          }
        ],
        "description": "Query performance metrics data for specified endpoint and model, including error rate, completion count, excessive requests and other statistics",
        "operationId": "query"
      }
    },
    "/v1/messages": {
      "post": {
        "tags": [
          "messages"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Successful response, returns AI model generated message content or streaming response object"
          }
        },
        "description": "Send messages to AI model, supports streaming and non-streaming responses. Routes requests to corresponding AI service providers through routing system",
        "operationId": "message",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessageRequest"
              }
            }
          },
          "required": true,
          "description": "Message request body containing model name, conversation message list and various generation parameters"
        }
      }
    },
    "/v1/space/get": {
      "get": {
        "tags": [
          "Space Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Space"
                }
              }
            },
            "description": "Successfully returns space details"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "spaceCode",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Space code, used to identify a specific space"
          }
        ],
        "description": "Get detailed information for a single space based on space code",
        "operationId": "getSpace"
      }
    },
    "/console/model": {
      "put": {
        "tags": [
          "Metadata Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Update successful"
          }
        },
        "description": "Update model information including endpoint, document address, attributes and characteristics configuration",
        "operationId": "updateModel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelOp"
              }
            }
          },
          "required": true,
          "description": "Model update operation parameters"
        }
      },
      "post": {
        "tags": [
          "Metadata Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ModelDB"
                }
              }
            },
            "description": "Creation successful"
          }
        },
        "description": "Create new model, set model basic information, associated endpoints and configuration attributes",
        "operationId": "createModel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelOp"
              }
            }
          },
          "required": true,
          "description": "Model creation operation parameters"
        }
      }
    },
    "/v1/embeddings": {
      "post": {
        "tags": [
          "Chat"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Successfully returns embedding vector results"
          }
        },
        "description": "Generate text embedding vectors, converts input text to high-dimensional vector representations for semantic search, similarity computation and other tasks",
        "operationId": "embedding",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmbeddingRequest"
              }
            }
          },
          "required": true,
          "description": "Embedding vector generation request parameters"
        }
      }
    },
    "/v1/space/list": {
      "get": {
        "tags": [
          "Space Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Space"
                  }
                }
              }
            },
            "description": "Successfully returns space information list"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "spaceCodes",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": true,
            "description": "Space code list, supports batch querying multiple spaces"
          }
        ],
        "description": "Batch retrieve space information based on space code list",
        "operationId": "listSpace"
      }
    },
    "/console/channel": {
      "put": {
        "tags": [
          "Metadata Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "OK"
          }
        },
        "operationId": "updateChannel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelUpdateOp"
              }
            }
          },
          "required": true
        }
      },
      "post": {
        "tags": [
          "Metadata Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelDB"
                }
              }
            },
            "description": "OK"
          }
        },
        "operationId": "createChannel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelCreateOp"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/audio/speech": {
      "post": {
        "tags": [
          "Audio Capabilities"
        ],
        "responses": {
          "200": {
            "description": "Successfully returns audio stream data"
          }
        },
        "description": "Text-to-speech service, converts input text to audio stream output",
        "operationId": "speech",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TtsRequest"
              }
            }
          },
          "required": true,
          "description": "Text-to-speech request parameters including text content, voice model, voice characteristics and other configurations"
        }
      }
    },
    "/v1/images/edits": {
      "post": {
        "tags": [
          "Images"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ImagesResponse"
                }
              }
            },
            "description": "Image editing successful"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "request",
            "schema": {
              "$ref": "#/components/schemas/ImagesEditRequest"
            },
            "required": true,
            "description": "Image editing request parameters"
          }
        ],
        "description": "Edit existing images with partial modifications based on prompts and masks",
        "operationId": "editImages"
      }
    },
    "/v1/space/create": {
      "post": {
        "tags": [
          "Space Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Space creation successful, returns space code"
          }
        },
        "description": "Create new space",
        "operationId": "createSpace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSpaceOp"
              }
            }
          },
          "required": true,
          "description": "Request parameters for creating space"
        }
      }
    },
    "/console/category": {
      "post": {
        "tags": [
          "Metadata Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryDB"
                }
              }
            },
            "description": "Creation successful, returns newly created category information"
          }
        },
        "description": "Create new category, supports creating parent-child hierarchical category structure",
        "operationId": "createCategory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryCreateOp"
              }
            }
          },
          "required": true,
          "description": "Category creation request parameters"
        }
      }
    },
    "/console/endpoint": {
      "put": {
        "tags": [
          "Metadata Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Update operation execution result"
          }
        },
        "description": "Update endpoint information including endpoint name, maintainer information, document address and billing script",
        "operationId": "updateEndpoint",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointOp"
              }
            }
          },
          "required": true,
          "description": "Endpoint update operation parameters"
        }
      },
      "post": {
        "tags": [
          "Metadata Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointDB"
                }
              }
            },
            "description": "Creation successful, returns endpoint database object"
          }
        },
        "description": "Create new endpoint, set endpoint basic information and billing rules",
        "operationId": "createEndpoint",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointOp"
              }
            }
          },
          "required": true,
          "description": "Endpoint creation operation parameters"
        }
      }
    },
    "/console/userInfo": {
      "get": {
        "tags": [
          "User Information Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Operator"
                }
              }
            },
            "description": "Returns current user's operator information"
          }
        },
        "description": "Get detailed information for current logged-in user",
        "operationId": "whoami_1"
      }
    },
    "/v1/apikey/create": {
      "post": {
        "tags": [
          "Information Query"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Returns newly generated API key string after successful creation"
          }
        },
        "description": "Create sub API key, creates sub-key with restricted permissions based on parent API key",
        "operationId": "createSubApikey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApikeyCreateOp"
              }
            }
          },
          "required": true,
          "description": "Operation parameters for creating sub API key"
        }
      }
    },
    "/v1/apikey/update": {
      "post": {
        "tags": [
          "Information Query"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Update operation execution result, returns true indicating successful update"
          }
        },
        "description": "Update sub API key information including name, security level, quota, permissions and other attributes",
        "operationId": "updateSubApikey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubApikeyUpdateOp"
              }
            }
          },
          "required": true,
          "description": "Sub API key update operation parameters"
        }
      }
    },
    "/v1/apikey/whoami": {
      "get": {
        "tags": [
          "Information Query"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApikeyInfo"
                }
              }
            },
            "description": "Returns complete information object for current API key"
          }
        },
        "description": "Get detailed information for current API key including permissions, quota, owner and other complete information",
        "operationId": "whoami"
      }
    },
    "/v1/audio/realtime": {
      "get": {
        "tags": [
          "Audio Capabilities"
        ],
        "responses": {
          "200": {
            "description": "Successfully established WebSocket connection"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "model",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Real-time speech recognition model name to use"
          }
        ],
        "description": "Establish real-time speech recognition WebSocket connection",
        "operationId": "asrStream"
      },
      "put": {
        "tags": [
          "Audio Capabilities"
        ],
        "responses": {
          "200": {
            "description": "Processing successful"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "model",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Real-time speech recognition model name to use"
          }
        ],
        "description": "Real-time speech recognition WebSocket connection processing",
        "operationId": "asrStream_3"
      },
      "head": {
        "tags": [
          "Audio Capabilities"
        ],
        "responses": {
          "200": {
            "description": "Processing successful"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "model",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Real-time speech recognition model name to use"
          }
        ],
        "description": "Real-time speech recognition WebSocket connection processing",
        "operationId": "asrStream_1"
      },
      "post": {
        "tags": [
          "Audio Capabilities"
        ],
        "responses": {
          "200": {
            "description": "Processing successful"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "model",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Real-time speech recognition model name to use"
          }
        ],
        "description": "Real-time speech recognition WebSocket connection processing",
        "operationId": "asrStream_2"
      },
      "patch": {
        "tags": [
          "Audio Capabilities"
        ],
        "responses": {
          "200": {
            "description": "Processing successful"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "model",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Real-time speech recognition model name to use"
          }
        ],
        "description": "Real-time speech recognition WebSocket connection processing",
        "operationId": "asrStream_4"
      },
      "delete": {
        "tags": [
          "Audio Capabilities"
        ],
        "responses": {
          "200": {
            "description": "Processing successful"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "model",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Real-time speech recognition model name to use"
          }
        ],
        "description": "Real-time speech recognition WebSocket connection processing",
        "operationId": "asrStream_5"
      },
      "options": {
        "tags": [
          "Audio Capabilities"
        ],
        "responses": {
          "200": {
            "description": "Processing successful"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "model",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Real-time speech recognition model name to use"
          }
        ],
        "description": "Real-time speech recognition WebSocket connection processing",
        "operationId": "asrStream_6"
      }
    },
    "/v1/document/parse": {
      "get": {
        "tags": [
          "Document"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DocParseResponse"
                }
              }
            },
            "description": "Successfully returns document parsing results"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "task_id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Unique identifier for document parsing task, used to query parsing results"
          }
        ],
        "description": "Query the result status and parsed content of document parsing task",
        "operationId": "queryParseResult"
      },
      "post": {
        "tags": [
          "Document"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/DocParseTaskInfo"
                }
              }
            },
            "description": "Successfully created document parsing task"
          }
        },
        "description": "Submit document parsing task, supports intelligent parsing of multiple document formats",
        "operationId": "parse",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocParseRequest"
              }
            }
          },
          "required": true,
          "description": "Document parsing request parameters including file information to be parsed and parsing configuration"
        }
      }
    },
    "/console/model/link": {
      "post": {
        "tags": [
          "Metadata Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Association successful"
          }
        },
        "description": "Associate models, establish linking relationships between models",
        "operationId": "linkModel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelLinkOp"
              }
            }
          },
          "required": true,
          "description": "Model association operation parameters"
        }
      }
    },
    "/console/model/list": {
      "get": {
        "tags": [
          "Metadata Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelDB"
                  }
                }
              }
            },
            "description": "Query successful"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "condition",
            "schema": {
              "$ref": "#/components/schemas/ModelCondition"
            },
            "required": true,
            "description": "Model query conditions"
          }
        ],
        "description": "Query model list based on conditions, supports multiple filtering conditions",
        "operationId": "listModels"
      }
    },
    "/v1/audio/asr/flash": {
      "post": {
        "tags": [
          "Audio Capabilities"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/FlashAsrResponse"
                }
              }
            },
            "description": "Successfully returns speech recognition results"
          }
        },
        "parameters": [
          {
            "in": "header",
            "name": "format",
            "schema": {
              "type": "string",
              "default": "wav"
            },
            "required": false,
            "description": "Audio format, supports wav, mp3 and other formats"
          },
          {
            "in": "header",
            "name": "sample_rate",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 16000
            },
            "required": false,
            "description": "Audio sample rate in Hz, common values are 16000, 8000, etc."
          },
          {
            "in": "header",
            "name": "max_sentence_silence",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 3000
            },
            "required": false,
            "description": "Maximum silence duration between sentences in milliseconds, used for sentence segmentation"
          },
          {
            "in": "header",
            "name": "model",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Speech recognition model name to use"
          }
        ],
        "description": "Fast speech recognition service, processes audio stream in real-time and returns recognition results",
        "operationId": "flashAsr"
      }
    },
    "/v1/meta/model/list": {
      "get": {
        "tags": [
          "Information Query"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModelDB"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "condition",
            "schema": {
              "$ref": "#/components/schemas/ModelCondition"
            },
            "required": true
          }
        ],
        "operationId": "listModel"
      }
    },
    "/v1/meta/model/page": {
      "get": {
        "tags": [
          "Information Query"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PageModelDB"
                }
              }
            },
            "description": "OK"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "condition",
            "schema": {
              "$ref": "#/components/schemas/ModelCondition"
            },
            "required": true
          }
        ],
        "operationId": "pageModel"
      }
    },
    "/v1/space/role/list": {
      "get": {
        "tags": [
          "Space Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleWithSpace"
                  }
                }
              }
            },
            "description": "Successfully returns role list"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "memberUid",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Member user ID"
          }
        ],
        "description": "Query member's role list across all spaces",
        "operationId": "listRole"
      }
    },
    "/console/apikey/page": {
      "get": {
        "tags": [
          "API Key Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PageApikeyDB"
                }
              }
            },
            "description": "Paginated query results"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "condition",
            "schema": {
              "$ref": "#/components/schemas/ApikeyCondition"
            },
            "required": true,
            "description": "Paginated query conditions"
          }
        ],
        "description": "Paginated query of API Key list",
        "operationId": "pageApikey"
      }
    },
    "/v1/audio/asr/stream": {
      "get": {
        "tags": [
          "Audio Capabilities"
        ],
        "responses": {
          "200": {
            "description": "Successfully established WebSocket connection"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "model",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Streaming speech recognition model name to use"
          }
        ],
        "description": "Establish streaming speech recognition WebSocket connection",
        "operationId": "asrStream_7"
      },
      "put": {
        "tags": [
          "Audio Capabilities"
        ],
        "responses": {
          "200": {
            "description": "Processing successful"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "model",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Streaming speech recognition model name to use"
          }
        ],
        "description": "Streaming speech recognition WebSocket connection processing",
        "operationId": "asrStream_10"
      },
      "head": {
        "tags": [
          "Audio Capabilities"
        ],
        "responses": {
          "200": {
            "description": "Processing successful"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "model",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Streaming speech recognition model name to use"
          }
        ],
        "description": "Streaming speech recognition WebSocket connection processing",
        "operationId": "asrStream_8"
      },
      "post": {
        "tags": [
          "Audio Capabilities"
        ],
        "responses": {
          "200": {
            "description": "Processing successful"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "model",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Streaming speech recognition model name to use"
          }
        ],
        "description": "Streaming speech recognition WebSocket connection processing",
        "operationId": "asrStream_9"
      },
      "patch": {
        "tags": [
          "Audio Capabilities"
        ],
        "responses": {
          "200": {
            "description": "Processing successful"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "model",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Streaming speech recognition model name to use"
          }
        ],
        "description": "Streaming speech recognition WebSocket connection processing",
        "operationId": "asrStream_11"
      },
      "delete": {
        "tags": [
          "Audio Capabilities"
        ],
        "responses": {
          "200": {
            "description": "Processing successful"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "model",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Streaming speech recognition model name to use"
          }
        ],
        "description": "Streaming speech recognition WebSocket connection processing",
        "operationId": "asrStream_12"
      },
      "options": {
        "tags": [
          "Audio Capabilities"
        ],
        "responses": {
          "200": {
            "description": "Processing successful"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "model",
            "schema": {
              "type": "string"
            },
            "required": false,
            "description": "Streaming speech recognition model name to use"
          }
        ],
        "description": "Streaming speech recognition WebSocket connection processing",
        "operationId": "asrStream_13"
      }
    },
    "/v1/chat/completions": {
      "post": {
        "tags": [
          "Chat"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Chat completion response successful"
          }
        },
        "description": "Create chat completion request, supports single model and multi-model processing, can return streaming or non-streaming responses",
        "operationId": "completion",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompletionRequest"
              }
            }
          },
          "required": true,
          "description": "Chat completion request body containing model configuration and conversation messages"
        }
      }
    },
    "/console/apikey/apply": {
      "post": {
        "tags": [
          "API Key Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Application successful, returns newly created API Key"
          }
        },
        "description": "Apply to create new API Key",
        "operationId": "apply",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplyOp"
              }
            }
          },
          "required": true,
          "description": "API Key application parameters"
        }
      }
    },
    "/console/apikey/reset": {
      "post": {
        "tags": [
          "API Key Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Reset successful, returns new API Key"
          }
        },
        "description": "Reset API Key, generate new key",
        "operationId": "reset",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CodeOp"
              }
            }
          },
          "required": true,
          "description": "Reset operation parameters"
        }
      }
    },
    "/v1/images/variations": {
      "post": {
        "tags": [
          "Images"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ImagesResponse"
                }
              }
            },
            "description": "Image variation generation successful"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "request",
            "schema": {
              "$ref": "#/components/schemas/ImagesVariationRequest"
            },
            "required": true,
            "description": "Image variation generation request parameters"
          }
        ],
        "description": "Generate variation versions based on input images, creating different variants while maintaining original image style",
        "operationId": "createVariations"
      }
    },
    "/v1/meta/channel/list": {
      "get": {
        "tags": [
          "Information Query"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChannelDB"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "condition",
            "schema": {
              "$ref": "#/components/schemas/ChannelCondition"
            },
            "required": true
          }
        ],
        "operationId": "listChannel"
      }
    },
    "/v1/meta/channel/page": {
      "get": {
        "tags": [
          "Information Query"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PageChannelDB"
                }
              }
            },
            "description": "OK"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "condition",
            "schema": {
              "$ref": "#/components/schemas/ChannelCondition"
            },
            "required": true
          }
        ],
        "operationId": "pageChannel"
      }
    },
    "/v1/space/member/exit": {
      "post": {
        "tags": [
          "Space Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Exit space successful"
          }
        },
        "description": "Member actively exits space",
        "operationId": "exitSpace",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExitSpaceOp"
              }
            }
          },
          "required": true,
          "description": "Request parameters for exiting space"
        }
      }
    },
    "/v1/space/member/list": {
      "get": {
        "tags": [
          "Space Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Member"
                  }
                }
              }
            },
            "description": "Successfully returns space member list"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "spaceCode",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Space code, used to identify a specific space"
          }
        ],
        "description": "Get member list for specified space",
        "operationId": "listMember"
      }
    },
    "/v1/space/member/role": {
      "get": {
        "tags": [
          "Space Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RoleWithSpace"
                }
              }
            },
            "description": "Successfully returns member role information"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "memberUid",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Member user ID"
          },
          {
            "in": "query",
            "name": "spaceCode",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Space code"
          }
        ],
        "description": "Get member's role information in specified space",
        "operationId": "getMemberRole"
      }
    },
    "/v1/space/name/update": {
      "post": {
        "tags": [
          "Space Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Space name update successful"
          }
        },
        "description": "Update space name",
        "operationId": "updateSpaceName",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSpaceNameOp"
              }
            }
          },
          "required": true,
          "description": "Request parameters for updating space name"
        }
      }
    },
    "/v1/space/role/create": {
      "post": {
        "tags": [
          "Space Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Role creation successful"
          }
        },
        "description": "Create role in specified space",
        "operationId": "createRole",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRoleOp"
              }
            }
          },
          "required": true,
          "description": "Request parameters for creating role"
        }
      }
    },
    "/console/apikey/rename": {
      "post": {
        "tags": [
          "API Key Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Rename operation successful return"
          }
        },
        "description": "Modify API Key name",
        "operationId": "rename",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NameOp"
              }
            }
          },
          "required": true,
          "description": "Rename operation parameters"
        }
      }
    },
    "/console/model/details": {
      "get": {
        "tags": [
          "Metadata Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ModelDetails"
                }
              }
            },
            "description": "Get successful"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "modelName",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Model name"
          }
        ],
        "description": "Get model detailed information including model basic information and associated channel information",
        "operationId": "getModelDetails"
      }
    },
    "/console/model/publish": {
      "post": {
        "tags": [
          "Metadata Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Publish successful"
          }
        },
        "description": "Publish model, set model visibility to public status",
        "operationId": "publishModel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelVisibilityOp"
              }
            }
          },
          "required": true,
          "description": "Model visibility operation parameters"
        }
      }
    },
    "/v1/images/generations": {
      "post": {
        "tags": [
          "Images"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ImagesResponse"
                }
              }
            },
            "description": "Image generation successful"
          }
        },
        "description": "Generate new images based on text descriptions",
        "operationId": "generateImages",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImagesRequest"
              }
            }
          },
          "required": true,
          "description": "Image generation request body containing prompts and generation parameters"
        }
      }
    },
    "/v1/meta/category/list": {
      "get": {
        "tags": [
          "Information Query"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CategoryDB"
                  }
                }
              }
            },
            "description": "Successfully returns category list"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "condition",
            "schema": {
              "$ref": "#/components/schemas/CategoryCondition"
            },
            "required": true,
            "description": "Category query conditions, used to filter category data"
          }
        ],
        "description": "Query category list based on conditions, returns all categories that meet the conditions",
        "operationId": "listCategory"
      }
    },
    "/v1/meta/category/page": {
      "get": {
        "tags": [
          "Information Query"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PageCategoryDB"
                }
              }
            },
            "description": "Successfully returns paginated category data"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "condition",
            "schema": {
              "$ref": "#/components/schemas/CategoryCondition"
            },
            "required": true,
            "description": "Category query conditions including pagination parameters and filter conditions"
          }
        ],
        "description": "Paginated query of category information, supports multiple condition filtering",
        "operationId": "pageCategory"
      }
    },
    "/v1/meta/category/tree": {
      "get": {
        "tags": [
          "Information Query"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointCategoryTree"
                }
              }
            },
            "description": "Successfully returns category tree structure"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "condition",
            "schema": {
              "$ref": "#/components/schemas/CategoryTreeCondition"
            },
            "required": true,
            "description": "Category tree query conditions including category code, whether to include endpoints and other parameters"
          }
        ],
        "description": "Query category tree structure based on conditions, returns tree structure of specified category and its subcategories",
        "operationId": "listTree"
      }
    },
    "/v1/meta/endpoint/list": {
      "get": {
        "tags": [
          "Information Query"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EndpointDB"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "condition",
            "schema": {
              "$ref": "#/components/schemas/EndpointCondition"
            },
            "required": true
          }
        ],
        "operationId": "listEndpoint"
      }
    },
    "/v1/meta/endpoint/page": {
      "get": {
        "tags": [
          "Information Query"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PageEndpointDB"
                }
              }
            },
            "description": "OK"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "condition",
            "schema": {
              "$ref": "#/components/schemas/EndpointCondition"
            },
            "required": true
          }
        ],
        "operationId": "pageEndpoint"
      }
    },
    "/v1/meta/protocol/list": {
      "get": {
        "tags": [
          "Information Query"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "Get successful"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "entityType",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Entity type (endpoint or model)"
          },
          {
            "in": "query",
            "name": "entityCode",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Entity code"
          }
        ],
        "description": "Get list of supported protocols",
        "operationId": "listProtocols"
      }
    },
    "/v1/meta/supplier/list": {
      "get": {
        "tags": [
          "Information Query"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            "description": "Get successful"
          }
        },
        "description": "Get supplier list",
        "operationId": "listSuppliers"
      }
    },
    "/v1/space/owner/change": {
      "post": {
        "tags": [
          "Space Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Space owner change successful"
          }
        },
        "description": "Change space owner",
        "operationId": "changeSpaceOwner",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeSpaceOwnerOp"
              }
            }
          },
          "required": true,
          "description": "Request parameters for changing space owner"
        }
      }
    },
    "/console/apikey/certify": {
      "post": {
        "tags": [
          "API Key Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Authentication operation successful return"
          }
        },
        "description": "Perform security authentication on API Key, set authentication code and security level",
        "operationId": "certify",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CertifyOp"
              }
            }
          },
          "required": true,
          "description": "Security authentication operation parameters"
        }
      }
    },
    "/console/model/activate": {
      "post": {
        "tags": [
          "Metadata Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Activation successful"
          }
        },
        "description": "Activate model, set model status to active state",
        "operationId": "activateModel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelStatusOp"
              }
            }
          },
          "required": true,
          "description": "Model status operation parameters"
        }
      }
    },
    "/v1/meta/property/voice": {
      "get": {
        "tags": [
          "Information Query"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/VoiceProperties"
                }
              }
            },
            "description": "Get successful"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "condition",
            "schema": {
              "$ref": "#/components/schemas/ChannelCondition"
            },
            "required": true,
            "description": "Channel query conditions"
          }
        ],
        "description": "Get voice attribute configuration",
        "operationId": "fetchVoiceProperty"
      }
    },
    "/v1/space/member/create": {
      "post": {
        "tags": [
          "Space Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Member addition successful"
          }
        },
        "description": "Add member to space",
        "operationId": "createMember",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMemberOp"
              }
            }
          },
          "required": true,
          "description": "Request parameters for creating member"
        }
      }
    },
    "/v1/space/member/remove": {
      "post": {
        "tags": [
          "Space Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Member removal successful"
          }
        },
        "description": "Remove member from space",
        "operationId": "removeMember",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveMemberOp"
              }
            }
          },
          "required": true,
          "description": "Request parameters for removing member"
        }
      }
    },
    "/v1/space/member/update": {
      "post": {
        "tags": [
          "Space Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Member role update successful"
          }
        },
        "description": "Update space member's role",
        "operationId": "updateMember",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMemberRoleOp"
              }
            }
          },
          "required": true,
          "description": "Request parameters for updating member role"
        }
      }
    },
    "/console/apikey/activate": {
      "post": {
        "tags": [
          "API Key Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Activation operation successful return"
          }
        },
        "description": "Activate API Key to enable normal use",
        "operationId": "activate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CodeOp"
              }
            }
          },
          "required": true,
          "description": "Activation operation parameters"
        }
      }
    },
    "/console/model/authorize": {
      "post": {
        "tags": [
          "Metadata Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Authorization setting successful"
          }
        },
        "description": "Set model authorization, manage model access permissions and authorized users",
        "operationId": "authorizeModel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelAuthorizerOp"
              }
            }
          },
          "required": true,
          "description": "Model authorization operation parameters"
        }
      }
    },
    "/v1/meta/channel/private": {
      "put": {
        "tags": [
          "Information Query"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Update successful"
          }
        },
        "description": "Update private channel configuration information",
        "operationId": "updatePrivateChannel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelUpdateOp"
              }
            }
          },
          "required": true,
          "description": "Channel update operation parameters"
        }
      },
      "post": {
        "tags": [
          "Information Query"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelDB"
                }
              }
            },
            "description": "Creation successful"
          }
        },
        "description": "Create private channel",
        "operationId": "createPrivateChannel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelCreateOp"
              }
            }
          },
          "required": true,
          "description": "Channel creation operation parameters"
        }
      }
    },
    "/console/channel/activate": {
      "post": {
        "tags": [
          "Metadata Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "OK"
          }
        },
        "operationId": "activateChannel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelStatusOp"
              }
            }
          },
          "required": true
        }
      }
    },
    "/console/model/inactivate": {
      "post": {
        "tags": [
          "Metadata Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Deactivation successful"
          }
        },
        "description": "Deactivate model, set model status to inactive state",
        "operationId": "inactivateModel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelStatusOp"
              }
            }
          },
          "required": true,
          "description": "Model status operation parameters"
        }
      }
    },
    "/console/userInfo/manager": {
      "post": {
        "tags": [
          "User Information Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/UserDB"
                }
              }
            },
            "description": "User database record returned after successfully adding administrator privileges"
          }
        },
        "description": "Add administrator privileges, grant user administrator role through user ID, source and source ID or email",
        "operationId": "addManager",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Operator"
              }
            }
          },
          "required": true,
          "description": "Operation user information, used to identify users who need administrator privileges added"
        }
      }
    },
    "/v1/meta/endpoint/details": {
      "get": {
        "tags": [
          "Information Query"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointDetails"
                }
              }
            },
            "description": "OK"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "condition",
            "schema": {
              "$ref": "#/components/schemas/EndpointDetailsCondition"
            },
            "required": true
          }
        ],
        "operationId": "listEndpointDetails"
      }
    },
    "/v1/meta/schema/priceInfo": {
      "get": {
        "tags": [
          "Information Query"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/JsonSchema"
                }
              }
            },
            "description": "Get successful"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "entityType",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Entity type (endpoint or model)"
          },
          {
            "in": "query",
            "name": "entityCode",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Entity code"
          }
        ],
        "description": "Get JSON Schema definition for price information",
        "operationId": "getPriceInfoSchema"
      }
    },
    "/console/apikey/fetchBySha": {
      "get": {
        "tags": [
          "API Key Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApikeyInfo"
                }
              }
            },
            "description": "Successfully returns API Key information"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "sha",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "SHA hash value of API Key"
          },
          {
            "in": "query",
            "name": "onlyActive",
            "schema": {
              "type": "boolean"
            },
            "required": false,
            "description": "Whether to return only activated API Keys"
          }
        ],
        "description": "Query API Key information based on SHA value",
        "operationId": "fetchBySha"
      }
    },
    "/console/apikey/inactivate": {
      "post": {
        "tags": [
          "API Key Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Deactivation operation successful return"
          }
        },
        "description": "Deactivate API Key to disable its use",
        "operationId": "inactivate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CodeOp"
              }
            }
          },
          "required": true,
          "description": "Deactivation operation parameters"
        }
      }
    },
    "/console/category/activate": {
      "post": {
        "tags": [
          "Metadata Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Activation operation execution result"
          }
        },
        "description": "Activate specified category, set category status to active state",
        "operationId": "activateCategory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryStatusOp"
              }
            }
          },
          "required": true,
          "description": "Category status operation request parameters"
        }
      }
    },
    "/console/endpoint/activate": {
      "post": {
        "tags": [
          "Metadata Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Activation operation execution result"
          }
        },
        "description": "Activate endpoint, set endpoint status to active available state",
        "operationId": "activateEndpoint",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointStatusOp"
              }
            }
          },
          "required": true,
          "description": "Endpoint activation operation parameters"
        }
      }
    },
    "/console/endpoint/category": {
      "post": {
        "tags": [
          "Metadata Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Add category operation execution result"
          }
        },
        "description": "Add category tags to endpoint, establish association between endpoint and category",
        "operationId": "addCategoryWithEndpoint",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointCategoriesOp"
              }
            }
          },
          "required": true,
          "description": "Endpoint category association operation parameters"
        }
      },
      "delete": {
        "tags": [
          "Metadata Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Remove category operation execution result"
          }
        },
        "description": "Remove category tags from endpoint, delete association between endpoint and specified category",
        "operationId": "removeCategoryWithEndpoint",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointCategoriesOp"
              }
            }
          },
          "required": true,
          "description": "Endpoint category removal operation parameters"
        }
      }
    },
    "/console/script/lua/reload": {
      "post": {
        "tags": [
          "Script Console Controller"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            },
            "description": "Script reload successful, returns script SHA value"
          }
        },
        "description": "Reload specified Lua script file to Redis, supports specifying default script as backup",
        "operationId": "reloadLuaScript",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScriptInfo"
              }
            }
          },
          "required": true,
          "description": "Script reload request information"
        }
      }
    },
    "/v1/meta/category/tree/all": {
      "get": {
        "tags": [
          "Information Query"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EndpointCategoryTree"
                  }
                }
              }
            },
            "description": "Successfully returns all category tree lists"
          }
        },
        "description": "Get complete tree structure of all top-level categories, including all subcategories and endpoint information",
        "operationId": "listAllTree"
      }
    },
    "/v1/meta/model/info/{name}": {
      "get": {
        "tags": [
          "Information Query"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ModelDB"
                }
              }
            },
            "description": "OK"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "name",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "getModel"
      }
    },
    "/console/apikey/bindService": {
      "post": {
        "tags": [
          "API Key Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Service binding operation successful return"
          }
        },
        "description": "Bind API Key to specified service",
        "operationId": "bindService",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceOp"
              }
            }
          },
          "required": true,
          "description": "Service binding operation parameters"
        }
      }
    },
    "/console/apikey/fetchByCode": {
      "get": {
        "tags": [
          "API Key Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApikeyInfo"
                }
              }
            },
            "description": "Successfully returns API Key information"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Unique code of API Key"
          },
          {
            "in": "query",
            "name": "onlyActive",
            "schema": {
              "type": "boolean"
            },
            "required": false,
            "description": "Whether to return only activated API Keys"
          }
        ],
        "description": "Query API Key information based on code",
        "operationId": "fetchByCode"
      }
    },
    "/console/apikey/role/update": {
      "post": {
        "tags": [
          "API Key Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Update operation successful return"
          }
        },
        "description": "Update API Key role permission configuration",
        "operationId": "updateRole",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleOp"
              }
            }
          },
          "required": true,
          "description": "Role permission update operation parameters"
        }
      }
    },
    "/console/channel/inactivate": {
      "post": {
        "tags": [
          "Metadata Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "OK"
          }
        },
        "operationId": "inactivateChannel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelStatusOp"
              }
            }
          },
          "required": true
        }
      }
    },
    "/v1/apikey/permission/check": {
      "get": {
        "tags": [
          "Information Query"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Permission check result, returns true for access permission, false for no permission"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "url",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "URL path that needs permission check"
          }
        ],
        "description": "Check if current API key has permission to access specified URL path",
        "operationId": "permissionCheck"
      }
    },
    "/v1/meta/schema/channelInfo": {
      "get": {
        "tags": [
          "Information Query"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/JsonSchema"
                }
              }
            },
            "description": "Get successful"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "entityType",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Entity type (endpoint or model)"
          },
          {
            "in": "query",
            "name": "entityCode",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Entity code"
          },
          {
            "in": "query",
            "name": "protocol",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Communication protocol"
          }
        ],
        "description": "Get JSON Schema definition for channel information",
        "operationId": "getChannelInfoSchema"
      }
    },
    "/console/apikey/quota/update": {
      "post": {
        "tags": [
          "API Key Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Quota update operation successful return"
          }
        },
        "description": "Update API Key monthly quota limit",
        "operationId": "updateQuota",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuotaOp"
              }
            }
          },
          "required": true,
          "description": "Quota update operation parameters"
        }
      }
    },
    "/console/endpoint/inactivate": {
      "post": {
        "tags": [
          "Metadata Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Deactivation operation execution result"
          }
        },
        "description": "Deactivate endpoint, set endpoint status to inactive state",
        "operationId": "inactivateEndpoint",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointStatusOp"
              }
            }
          },
          "required": true,
          "description": "Endpoint status operation parameters"
        }
      }
    },
    "/v1/meta/schema/modelFeature": {
      "get": {
        "tags": [
          "Information Query"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/JsonSchema"
                }
              }
            },
            "description": "Get successful"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "endpoints",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            },
            "required": true,
            "description": "Endpoint list"
          }
        ],
        "description": "Get JSON Schema definition for model features",
        "operationId": "getModelFeatureSchema"
      }
    },
    "/console/apikey/cost/{akCode}": {
      "get": {
        "tags": [
          "API Key Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApikeyMonthCostDB"
                  }
                }
              }
            },
            "description": "Successfully returns API Key monthly billing list"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "akCode",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "API Key code"
          }
        ],
        "description": "Query monthly billing list for specified API Key",
        "operationId": "listApiKeyBillings"
      }
    },
    "/console/category/inactivate/": {
      "post": {
        "tags": [
          "Metadata Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Deactivation operation execution result"
          }
        },
        "description": "Deactivate specified category, set category status to inactive state",
        "operationId": "inactivateCategory",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryStatusOp"
              }
            }
          },
          "required": true,
          "description": "Category status operation request parameters"
        }
      }
    },
    "/console/model/publish/cancel": {
      "post": {
        "tags": [
          "Metadata Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Unpublish successful"
          }
        },
        "description": "Unpublish model, set model visibility to private state",
        "operationId": "cancelPublishModel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModelVisibilityOp"
              }
            }
          },
          "required": true,
          "description": "Model visibility operation parameters"
        }
      }
    },
    "/v1/audio/transcriptions/file": {
      "post": {
        "tags": [
          "Audio Capabilities"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AudioTranscriptionResp"
                }
              }
            },
            "description": "Transcription task submitted successfully, returns task ID"
          }
        },
        "description": "Submit audio file transcription task, supports asynchronous processing of audio files to text",
        "operationId": "transcribeAudio",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AudioTranscriptionReq"
              }
            }
          },
          "required": true,
          "description": "Audio transcription request parameters, including audio file URL, model, callback address and other information"
        }
      }
    },
    "/v1/meta/endpoint/info/{code}": {
      "get": {
        "tags": [
          "Information Query"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointDB"
                }
              }
            },
            "description": "OK"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "code",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "operationId": "getEndpoint"
      }
    },
    "/v1/meta/schema/modelProperty": {
      "get": {
        "tags": [
          "Information Query"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/JsonSchema"
                }
              }
            },
            "description": "Get successful"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "endpoints",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            },
            "required": true,
            "description": "Endpoint list"
          }
        ],
        "description": "Get JSON Schema definition for model attributes",
        "operationId": "getModelPropertySchema"
      }
    },
    "/console/script/check/model/map": {
      "get": {
        "tags": [
          "Script Console Controller"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ModelDB"
                  }
                }
              }
            },
            "description": "Successfully returns model mapping relationships"
          }
        },
        "description": "Get mapping relationships of all models, returns key-value pairs of model names and detailed model information",
        "operationId": "listMap"
      }
    },
    "/console/apikey/balance/{akCode}": {
      "get": {
        "tags": [
          "API Key Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            },
            "description": "Successfully returns API Key balance information"
          }
        },
        "parameters": [
          {
            "in": "path",
            "name": "akCode",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "API Key code"
          }
        ],
        "description": "Query balance information for specified API Key, including current month cost, quota and remaining balance",
        "operationId": "getApiKeyBalance"
      }
    },
    "/console/script/model/map/refresh": {
      "post": {
        "tags": [
          "Script Console Controller"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Refresh operation completed successfully"
          }
        },
        "description": "Refresh model mapping cache, reload all model data to cache",
        "operationId": "refresh"
      }
    },
    "/v1/meta/channel/private/activate": {
      "post": {
        "tags": [
          "Information Query"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Activation successful"
          }
        },
        "description": "Activate private channel",
        "operationId": "activatePrivateChannel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelStatusOp"
              }
            }
          },
          "required": true,
          "description": "Channel status operation parameters"
        }
      }
    },
    "/v1/meta/model/list/for-selection": {
      "get": {
        "tags": [
          "Information Query"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Model"
                  }
                }
              }
            },
            "description": "OK"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "condition",
            "schema": {
              "$ref": "#/components/schemas/ModelCondition"
            },
            "required": true
          }
        ],
        "operationId": "listModelForSelection"
      }
    },
    "/console/endpoint/category/replace": {
      "post": {
        "tags": [
          "Metadata Management"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Replace category operation execution result"
          }
        },
        "description": "Replace endpoint category tags, completely replace original category associations with new category set",
        "operationId": "replaceCategoryWithEndpoint",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointCategoriesOp"
              }
            }
          },
          "required": true,
          "description": "Endpoint category replacement operation parameters"
        }
      }
    },
    "/v1/meta/channel/private/inactivate": {
      "post": {
        "tags": [
          "Information Query"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "type": "boolean"
                }
              }
            },
            "description": "Deactivation successful"
          }
        },
        "description": "Deactivate private channel",
        "operationId": "inactivatePrivateChannel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChannelStatusOp"
              }
            }
          },
          "required": true,
          "description": "Channel status operation parameters"
        }
      }
    },
    "/v1/audio/transcriptions/file/result": {
      "post": {
        "tags": [
          "Audio Capabilities"
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/AudioTranscriptionResultResp"
                }
              }
            },
            "description": "Successfully returns transcription result data"
          }
        },
        "description": "Query audio transcription task results, get completed transcription text content based on task ID",
        "operationId": "getTranscriptionResult",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AudioTranscriptionResultReq"
              }
            }
          },
          "required": true,
          "description": "Request parameters for querying transcription results, including task ID list"
        }
      }
    }
  },
  "openapi": "3.0.1",
  "servers": [
    {
      "url": "https://api.bella.top",
      "description": "Generated server url"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "components": {
    "schemas": {
      "Row": {
        "type": "object",
        "properties": {
          "cells": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Cell"
            }
          }
        }
      },
      "Cell": {
        "type": "object",
        "properties": {
          "path": {
            "type": "object"
          },
          "text": {
            "type": "string"
          },
          "nodes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocParseResult"
            }
          }
        }
      },
      "Tool": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "input_schema": {
            "$ref": "#/components/schemas/InputSchema"
          },
          "cache_control": {
            "type": "object"
          }
        }
      },
      "Image": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "base64": {
            "type": "string"
          },
          "file_id": {
            "type": "string"
          }
        }
      },
      "Model": {
        "type": "object",
        "properties": {
          "cuid": {
            "type": "integer",
            "format": "int64"
          },
          "muid": {
            "type": "integer",
            "format": "int64"
          },
          "ctime": {
            "type": "string",
            "format": "date-time"
          },
          "mtime": {
            "type": "string",
            "format": "date-time"
          },
          "cuName": {
            "type": "string"
          },
          "muName": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "features": {
            "type": "string"
          },
          "linkedTo": {
            "type": "string"
          },
          "modelName": {
            "type": "string"
          },
          "ownerCode": {
            "type": "string"
          },
          "ownerName": {
            "type": "string"
          },
          "ownerType": {
            "type": "string"
          },
          "properties": {
            "type": "string"
          },
          "visibility": {
            "type": "string"
          },
          "documentUrl": {
            "type": "string"
          },
          "priceDetails": {
            "$ref": "#/components/schemas/PriceDetails"
          },
          "terminalModel": {
            "type": "string"
          }
        }
      },
      "Space": {
        "type": "object",
        "properties": {
          "ownerUid": {
            "type": "string",
            "description": "Unique identifier of space owner user"
          },
          "spaceCode": {
            "type": "string",
            "description": "Space code, uniquely identifies a space"
          },
          "spaceName": {
            "type": "string",
            "description": "Space name, space title displayed to users"
          }
        },
        "description": "Space entity, represents a workspace or team space"
      },
      "Usage": {
        "type": "object",
        "properties": {
          "num": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "string"
          },
          "quality": {
            "type": "string"
          },
          "input_tokens": {
            "type": "integer",
            "format": "int32"
          },
          "total_tokens": {
            "type": "integer",
            "format": "int32"
          },
          "output_tokens": {
            "type": "integer",
            "format": "int32"
          },
          "input_tokens_details": {
            "$ref": "#/components/schemas/InputTokensDetails"
          }
        }
      },
      "CodeOp": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "API Key code"
          },
          "email": {
            "type": "string",
            "description": "User email"
          },
          "source": {
            "type": "string",
            "description": "Source identifier"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "User ID"
          },
          "sourceId": {
            "type": "string",
            "description": "Source ID"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID"
          },
          "userName": {
            "type": "string",
            "description": "User name"
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator API Key"
          },
          "spaceCode": {
            "type": "string",
            "description": "Space code"
          },
          "optionalInfo": {
            "type": "object",
            "description": "Optional additional information",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "description": "API Key code operation parameters"
      },
      "Member": {
        "type": "object",
        "properties": {
          "memberUid": {
            "type": "string",
            "description": "Unique identifier of member user"
          },
          "memberName": {
            "type": "string",
            "description": "Display name or username of member"
          }
        },
        "description": "Space member entity, represents a member user in the space"
      },
      "NameOp": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "API Key code"
          },
          "name": {
            "type": "string",
            "description": "New API Key name"
          },
          "email": {
            "type": "string",
            "description": "User email"
          },
          "source": {
            "type": "string",
            "description": "Source identifier"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "User ID"
          },
          "sourceId": {
            "type": "string",
            "description": "Source ID"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID"
          },
          "userName": {
            "type": "string",
            "description": "User name"
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator API Key"
          },
          "spaceCode": {
            "type": "string",
            "description": "Space code"
          },
          "optionalInfo": {
            "type": "object",
            "description": "Optional additional information",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "description": "API Key name operation parameters"
      },
      "RoleOp": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "API Key code"
          },
          "email": {
            "type": "string",
            "description": "User email"
          },
          "paths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Permission path list"
          },
          "source": {
            "type": "string",
            "description": "Source identifier"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "User ID"
          },
          "roleCode": {
            "type": "string",
            "description": "Role code"
          },
          "sourceId": {
            "type": "string",
            "description": "Source ID"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID"
          },
          "userName": {
            "type": "string",
            "description": "User name"
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator API Key"
          },
          "spaceCode": {
            "type": "string",
            "description": "Space code"
          },
          "optionalInfo": {
            "type": "object",
            "description": "Optional additional information",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "description": "API Key role permission operation parameters"
      },
      "UserDB": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "User database primary key ID"
          },
          "ctime": {
            "type": "string",
            "format": "date-time",
            "description": "Record creation time"
          },
          "email": {
            "type": "string",
            "description": "User email address"
          },
          "mtime": {
            "type": "string",
            "format": "date-time",
            "description": "Record last modification time"
          },
          "source": {
            "type": "string",
            "description": "User source system identifier"
          },
          "sourceId": {
            "type": "string",
            "description": "User unique identifier in source system"
          },
          "userName": {
            "type": "string",
            "description": "User full name"
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator access key for API access authentication"
          },
          "optionalInfo": {
            "type": "string",
            "description": "Serialized optional extension information JSON string"
          }
        },
        "description": "User database entity, stores complete user information records"
      },
      "ApplyOp": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "API Key name"
          },
          "email": {
            "type": "string",
            "description": "User email"
          },
          "remark": {
            "type": "string",
            "description": "Remark information"
          },
          "source": {
            "type": "string",
            "description": "Source identifier"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "User ID"
          },
          "roleCode": {
            "type": "string",
            "description": "Role code"
          },
          "sourceId": {
            "type": "string",
            "description": "Source ID"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID"
          },
          "userName": {
            "type": "string",
            "description": "User name"
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator API Key"
          },
          "ownerCode": {
            "type": "string",
            "description": "Owner code"
          },
          "ownerName": {
            "type": "string",
            "description": "Owner name"
          },
          "ownerType": {
            "type": "string",
            "description": "Owner type"
          },
          "spaceCode": {
            "type": "string",
            "description": "Space code"
          },
          "monthQuota": {
            "type": "number",
            "description": "Monthly quota limit"
          },
          "optionalInfo": {
            "type": "object",
            "description": "Optional additional information",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "description": "API Key application operation parameters"
      },
      "Channel": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "cuid": {
            "type": "integer",
            "format": "int64"
          },
          "muid": {
            "type": "integer",
            "format": "int64"
          },
          "ctime": {
            "type": "string",
            "format": "date-time"
          },
          "mtime": {
            "type": "string",
            "format": "date-time"
          },
          "cuName": {
            "type": "string"
          },
          "muName": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "priority": {
            "type": "string"
          },
          "protocol": {
            "type": "string"
          },
          "supplier": {
            "type": "string"
          },
          "priceInfo": {
            "type": "string"
          },
          "entityCode": {
            "type": "string"
          },
          "entityType": {
            "type": "string"
          },
          "channelCode": {
            "type": "string"
          },
          "channelInfo": {
            "type": "string"
          },
          "trialEnabled": {
            "type": "string",
            "format": "byte"
          },
          "dataDestination": {
            "type": "string"
          }
        }
      },
      "Element": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "rows": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Row"
            }
          },
          "text": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "image": {
            "$ref": "#/components/schemas/Image"
          },
          "positions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Position"
            }
          },
          "description": {
            "type": "string"
          }
        }
      },
      "EnumDto": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "Message": {
        "type": "object",
        "required": [
          "role"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "content": {
            "type": "object"
          },
          "tool_calls": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ToolCall"
            }
          },
          "tool_call_id": {
            "type": "string"
          },
          "function_call": {
            "$ref": "#/components/schemas/FunctionCall"
          },
          "reasoning_content": {
            "type": "string"
          },
          "redacted_reasoning_content": {
            "type": "string"
          },
          "reasoning_content_signature": {
            "type": "string"
          }
        }
      },
      "ModelDB": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Unique model identifier ID"
          },
          "cuid": {
            "type": "integer",
            "format": "int64",
            "description": "Creator user ID"
          },
          "muid": {
            "type": "integer",
            "format": "int64",
            "description": "Modifier user ID"
          },
          "ctime": {
            "type": "string",
            "format": "date-time",
            "description": "Creation time"
          },
          "mtime": {
            "type": "string",
            "format": "date-time",
            "description": "Modification time"
          },
          "cuName": {
            "type": "string",
            "description": "Creator user name"
          },
          "muName": {
            "type": "string",
            "description": "Modifier user name"
          },
          "status": {
            "type": "string",
            "description": "Model status"
          },
          "features": {
            "type": "string",
            "description": "Model feature configuration, JSON format string"
          },
          "linkedTo": {
            "type": "string",
            "description": "Terminal model name associated with model"
          },
          "modelName": {
            "type": "string",
            "description": "Model name"
          },
          "ownerCode": {
            "type": "string",
            "description": "Owner code"
          },
          "ownerName": {
            "type": "string",
            "description": "Owner name"
          },
          "ownerType": {
            "type": "string",
            "description": "Owner type"
          },
          "properties": {
            "type": "string",
            "description": "Model property configuration, JSON format string"
          },
          "visibility": {
            "type": "string",
            "description": "Model visibility setting"
          },
          "documentUrl": {
            "type": "string",
            "description": "Model documentation link address"
          }
        },
        "description": "AI model database entity, containing complete model configuration information"
      },
      "ModelOp": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Operation user email"
          },
          "source": {
            "type": "string",
            "description": "Operation source"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "Operating user ID"
          },
          "features": {
            "type": "string",
            "description": "Model feature configuration, JSON format string"
          },
          "sourceId": {
            "type": "string",
            "description": "Operation source ID"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID"
          },
          "userName": {
            "type": "string",
            "description": "Operation user name"
          },
          "endpoints": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of endpoints associated with model",
            "uniqueItems": true
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator access key"
          },
          "modelName": {
            "type": "string",
            "description": "Model name"
          },
          "ownerCode": {
            "type": "string",
            "description": "Model owner code"
          },
          "ownerName": {
            "type": "string",
            "description": "Model owner name"
          },
          "ownerType": {
            "type": "string",
            "description": "Model owner type"
          },
          "spaceCode": {
            "type": "string",
            "description": "Space code"
          },
          "properties": {
            "type": "string",
            "description": "Model property configuration, JSON format string"
          },
          "documentUrl": {
            "type": "string",
            "description": "Model documentation address"
          },
          "optionalInfo": {
            "type": "object",
            "description": "Optional extension information",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "description": "Model operation parameters, used for creating and updating models"
      },
      "QuotaOp": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "API Key code"
          },
          "email": {
            "type": "string",
            "description": "User email"
          },
          "source": {
            "type": "string",
            "description": "Source identifier"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "User ID"
          },
          "sourceId": {
            "type": "string",
            "description": "Source ID"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID"
          },
          "userName": {
            "type": "string",
            "description": "User name"
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator API Key"
          },
          "spaceCode": {
            "type": "string",
            "description": "Space code"
          },
          "monthQuota": {
            "type": "number",
            "description": "Monthly quota limit"
          },
          "optionalInfo": {
            "type": "object",
            "description": "Optional additional information",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "description": "API Key quota update operation parameters"
      },
      "ApikeyDB": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Primary key ID"
          },
          "code": {
            "type": "string",
            "description": "API Key code"
          },
          "cuid": {
            "type": "integer",
            "format": "int64",
            "description": "Creator user ID"
          },
          "muid": {
            "type": "integer",
            "format": "int64",
            "description": "Modifier user ID"
          },
          "name": {
            "type": "string",
            "description": "API Key name"
          },
          "akSha": {
            "type": "string",
            "description": "SHA hash value of API Key"
          },
          "ctime": {
            "type": "string",
            "format": "date-time",
            "description": "Creation time"
          },
          "mtime": {
            "type": "string",
            "format": "date-time",
            "description": "Modification time"
          },
          "cuName": {
            "type": "string",
            "description": "Creator user name"
          },
          "muName": {
            "type": "string",
            "description": "Modifier user name"
          },
          "remark": {
            "type": "string",
            "description": "Remark information"
          },
          "status": {
            "type": "string",
            "description": "API Key status"
          },
          "roleCode": {
            "type": "string",
            "description": "Role code"
          },
          "akDisplay": {
            "type": "string",
            "description": "API Key display format (masked)"
          },
          "ownerCode": {
            "type": "string",
            "description": "Owner code"
          },
          "ownerName": {
            "type": "string",
            "description": "Owner name"
          },
          "ownerType": {
            "type": "string",
            "description": "Owner type"
          },
          "serviceId": {
            "type": "string",
            "description": "Bound service ID"
          },
          "monthQuota": {
            "type": "number",
            "description": "Monthly quota limit"
          },
          "parentCode": {
            "type": "string",
            "description": "Parent API Key code"
          },
          "certifyCode": {
            "type": "string",
            "description": "Security authentication code"
          },
          "safetyLevel": {
            "type": "string",
            "format": "byte",
            "description": "Security level"
          },
          "outEntityCode": {
            "type": "string",
            "description": "External entity code"
          },
          "safetySceneCode": {
            "type": "string",
            "description": "Security scenario code"
          }
        },
        "description": "API Key database entity"
      },
      "Endpoint": {
        "type": "object",
        "properties": {
          "cuid": {
            "type": "integer",
            "format": "int64"
          },
          "muid": {
            "type": "integer",
            "format": "int64"
          },
          "ctime": {
            "type": "string",
            "format": "date-time"
          },
          "mtime": {
            "type": "string",
            "format": "date-time"
          },
          "cuName": {
            "type": "string"
          },
          "muName": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "endpoint": {
            "type": "string"
          },
          "endpointCode": {
            "type": "string"
          },
          "endpointName": {
            "type": "string"
          },
          "maintainerCode": {
            "type": "string"
          },
          "maintainerName": {
            "type": "string"
          }
        }
      },
      "Function": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 64,
            "minLength": 0
          },
          "parameters": {
            "$ref": "#/components/schemas/FunctionParameter"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "Metadata": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "string"
          }
        }
      },
      "Operator": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User email address"
          },
          "source": {
            "type": "string",
            "description": "User source system identifier"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "User unique identifier ID"
          },
          "sourceId": {
            "type": "string",
            "description": "User unique identifier in source system"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant identifier ID"
          },
          "userName": {
            "type": "string",
            "description": "User full name"
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator access key for API access authentication"
          },
          "spaceCode": {
            "type": "string",
            "description": "Space code, used to identify the user's workspace"
          },
          "optionalInfo": {
            "type": "object",
            "description": "Optional extension information, storing additional user attribute data",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "description": "Operator information, containing user identity and permission-related data"
      },
      "Position": {
        "type": "object",
        "properties": {
          "bbox": {
            "type": "array",
            "items": {
              "type": "number",
              "format": "double"
            }
          },
          "page": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "RolePath": {
        "type": "object",
        "properties": {
          "excluded": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of excluded permission paths"
          },
          "included": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of included permission paths"
          }
        },
        "description": "Role permission path configuration"
      },
      "Sentence": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "end_time": {
            "type": "integer",
            "format": "int64"
          },
          "begin_time": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "ToolCall": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "index": {
            "type": "integer",
            "format": "int32"
          },
          "function": {
            "$ref": "#/components/schemas/FunctionCall"
          },
          "cache_control": {
            "type": "object"
          }
        }
      },
      "CertifyOp": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "API Key code"
          },
          "email": {
            "type": "string",
            "description": "User email"
          },
          "source": {
            "type": "string",
            "description": "Source identifier"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "User ID"
          },
          "sourceId": {
            "type": "string",
            "description": "Source ID"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID"
          },
          "userName": {
            "type": "string",
            "description": "User name"
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator API Key"
          },
          "spaceCode": {
            "type": "string",
            "description": "Space code"
          },
          "certifyCode": {
            "type": "string",
            "description": "Security authentication code"
          },
          "optionalInfo": {
            "type": "object",
            "description": "Optional additional information",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "description": "API Key security authentication operation parameters"
      },
      "ChannelDB": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Channel unique identifier ID"
          },
          "url": {
            "type": "string",
            "description": "Service URL address"
          },
          "cuid": {
            "type": "integer",
            "format": "int64",
            "description": "Creator user ID"
          },
          "muid": {
            "type": "integer",
            "format": "int64",
            "description": "Modifier user ID"
          },
          "ctime": {
            "type": "string",
            "format": "date-time",
            "description": "Creation time"
          },
          "mtime": {
            "type": "string",
            "format": "date-time",
            "description": "Modification time"
          },
          "cuName": {
            "type": "string",
            "description": "Creator user name"
          },
          "muName": {
            "type": "string",
            "description": "Modifier user name"
          },
          "status": {
            "type": "string",
            "description": "Channel status (active/inactive)"
          },
          "priority": {
            "type": "string",
            "description": "Channel priority"
          },
          "protocol": {
            "type": "string",
            "description": "Communication protocol"
          },
          "supplier": {
            "type": "string",
            "description": "Supplier name"
          },
          "ownerCode": {
            "type": "string",
            "description": "Owner code"
          },
          "ownerName": {
            "type": "string",
            "description": "Owner name"
          },
          "ownerType": {
            "type": "string",
            "description": "Owner type"
          },
          "priceInfo": {
            "type": "string",
            "description": "Price information JSON string"
          },
          "entityCode": {
            "type": "string",
            "description": "Entity code"
          },
          "entityType": {
            "type": "string",
            "description": "Entity type (endpoint or model)"
          },
          "visibility": {
            "type": "string",
            "description": "Visibility (public/private)"
          },
          "channelCode": {
            "type": "string",
            "description": "Channel code, automatically generated by system"
          },
          "channelInfo": {
            "type": "string",
            "description": "Channel configuration information JSON string"
          },
          "trialEnabled": {
            "type": "string",
            "format": "byte",
            "description": "Whether trial is enabled (0-No, 1-Yes)"
          },
          "dataDestination": {
            "type": "string",
            "description": "Data flow direction"
          }
        },
        "description": "Channel database entity"
      },
      "ImageData": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "quality": {
            "type": "string"
          },
          "b64_json": {
            "type": "string"
          },
          "output_format": {
            "type": "string"
          },
          "revised_prompt": {
            "type": "string"
          }
        }
      },
      "ServiceOp": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "API Key code"
          },
          "email": {
            "type": "string",
            "description": "User email"
          },
          "source": {
            "type": "string",
            "description": "Source identifier"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "User ID"
          },
          "sourceId": {
            "type": "string",
            "description": "Source ID"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID"
          },
          "userName": {
            "type": "string",
            "description": "User name"
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator API Key"
          },
          "serviceId": {
            "type": "string",
            "description": "Service ID"
          },
          "spaceCode": {
            "type": "string",
            "description": "Space code"
          },
          "optionalInfo": {
            "type": "object",
            "description": "Optional additional information",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "description": "API Key service binding operation parameters"
      },
      "ApikeyInfo": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "API Key unique code"
          },
          "name": {
            "type": "string",
            "description": "API Key name"
          },
          "akSha": {
            "type": "string",
            "description": "SHA hash value of API Key"
          },
          "apikey": {
            "type": "string",
            "description": "API Key secret"
          },
          "remark": {
            "type": "string",
            "description": "Remark information"
          },
          "status": {
            "type": "string",
            "description": "API Key status"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "User ID"
          },
          "roleCode": {
            "type": "string",
            "description": "Role code"
          },
          "rolePath": {
            "$ref": "#/components/schemas/RolePath",
            "description": "Role permission path configuration"
          },
          "akDisplay": {
            "type": "string",
            "description": "API Key display name"
          },
          "ownerCode": {
            "type": "string",
            "description": "Owner code"
          },
          "ownerName": {
            "type": "string",
            "description": "Owner name"
          },
          "ownerType": {
            "type": "string",
            "description": "Owner type"
          },
          "serviceId": {
            "type": "string",
            "description": "Service ID"
          },
          "monthQuota": {
            "type": "number",
            "description": "Monthly quota"
          },
          "parentCode": {
            "type": "string",
            "description": "Parent API Key code"
          },
          "parentInfo": {
            "$ref": "#/components/schemas/ApikeyInfo",
            "description": "Parent API Key information"
          },
          "safetyLevel": {
            "type": "string",
            "format": "byte",
            "description": "Security level"
          },
          "outEntityCode": {
            "type": "string",
            "description": "External entity code"
          },
          "safetySceneCode": {
            "type": "string",
            "description": "Security scenario code"
          }
        },
        "description": "API Key information object"
      },
      "CategoryDB": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Category unique identifier ID, database primary key"
          },
          "cuid": {
            "type": "integer",
            "format": "int64",
            "description": "Creator user ID, recording the user identifier who created this category"
          },
          "muid": {
            "type": "integer",
            "format": "int64",
            "description": "Modifier user ID, recording the user identifier who last modified this category"
          },
          "ctime": {
            "type": "string",
            "format": "date-time",
            "description": "Creation time, recording the category creation timestamp"
          },
          "mtime": {
            "type": "string",
            "format": "date-time",
            "description": "Modification time, recording the category's last modification timestamp"
          },
          "cuName": {
            "type": "string",
            "description": "Creator user name"
          },
          "muName": {
            "type": "string",
            "description": "Modifier user name"
          },
          "status": {
            "type": "string",
            "description": "Category status, indicating whether the category is in active state"
          },
          "parentCode": {
            "type": "string",
            "description": "Parent category code, used to build category hierarchical relationships"
          },
          "categoryCode": {
            "type": "string",
            "description": "Category code, system-generated unique identifier"
          },
          "categoryName": {
            "type": "string",
            "description": "Category name"
          }
        },
        "description": "Category database entity object, containing complete category information and audit fields"
      },
      "EndpointDB": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Endpoint ID, primary key"
          },
          "cuid": {
            "type": "integer",
            "format": "int64",
            "description": "Creator user ID"
          },
          "muid": {
            "type": "integer",
            "format": "int64",
            "description": "Modifier user ID"
          },
          "ctime": {
            "type": "string",
            "format": "date-time",
            "description": "Creation time"
          },
          "mtime": {
            "type": "string",
            "format": "date-time",
            "description": "Modification time"
          },
          "cuName": {
            "type": "string",
            "description": "Creator user name"
          },
          "muName": {
            "type": "string",
            "description": "Modifier user name"
          },
          "status": {
            "type": "string",
            "description": "Endpoint status"
          },
          "endpoint": {
            "type": "string",
            "description": "Endpoint address"
          },
          "costScript": {
            "type": "string",
            "description": "Billing script"
          },
          "documentUrl": {
            "type": "string",
            "description": "Documentation address"
          },
          "endpointCode": {
            "type": "string",
            "description": "Endpoint code, automatically generated by system"
          },
          "endpointName": {
            "type": "string",
            "description": "Endpoint name"
          },
          "maintainerCode": {
            "type": "string",
            "description": "Maintainer code"
          },
          "maintainerName": {
            "type": "string",
            "description": "Maintainer name"
          }
        },
        "description": "Endpoint database entity, containing complete endpoint information and system fields"
      },
      "EndpointOp": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Operating user email address"
          },
          "source": {
            "type": "string",
            "description": "Operation source identifier"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "Operating user ID"
          },
          "endpoint": {
            "type": "string",
            "description": "Endpoint address"
          },
          "sourceId": {
            "type": "string",
            "description": "Operation source ID"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant identifier"
          },
          "userName": {
            "type": "string",
            "description": "Operation user name"
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator access key"
          },
          "spaceCode": {
            "type": "string",
            "description": "Space code"
          },
          "testUsage": {
            "type": "object",
            "description": "Test usage data"
          },
          "costScript": {
            "type": "string",
            "description": "Billing script"
          },
          "documentUrl": {
            "type": "string",
            "description": "Documentation address"
          },
          "endpointName": {
            "type": "string",
            "description": "Endpoint name"
          },
          "optionalInfo": {
            "type": "object",
            "description": "Optional extension information",
            "additionalProperties": {
              "type": "object"
            }
          },
          "testPriceInfo": {
            "type": "string",
            "description": "Test price information"
          },
          "maintainerCode": {
            "type": "string",
            "description": "Maintainer code"
          },
          "maintainerName": {
            "type": "string",
            "description": "Maintainer name"
          }
        },
        "description": "Endpoint operation parameters, used for creating or updating endpoint information"
      },
      "IPriceInfo": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string"
          }
        }
      },
      "JsonSchema": {
        "type": "object",
        "properties": {
          "params": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypeSchema"
            },
            "description": "Parameter definition list",
            "uniqueItems": true
          }
        },
        "description": "JSON Schema definition"
      },
      "ScriptInfo": {
        "type": "object",
        "properties": {
          "scriptName": {
            "type": "string",
            "description": "Name of the script to reload"
          },
          "defaultName": {
            "type": "string",
            "description": "Default script name, used when the main script does not exist"
          }
        },
        "description": "Lua script information for script reload operations"
      },
      "SourceFile": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "mime_type": {
            "type": "string"
          }
        }
      },
      "ToolChoice": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "TtsRequest": {
        "type": "object",
        "properties": {
          "user": {
            "type": "string",
            "description": "User identifier"
          },
          "input": {
            "type": "string",
            "description": "Text content to be converted to speech"
          },
          "model": {
            "type": "string",
            "description": "Name of the speech synthesis model to use"
          },
          "speed": {
            "type": "number",
            "format": "double",
            "description": "Speech playback speed, 1.0 is normal speed"
          },
          "voice": {
            "type": "string",
            "description": "Voice tone selection"
          },
          "stream": {
            "type": "boolean",
            "description": "Whether to use streaming output"
          },
          "sample_rate": {
            "type": "integer",
            "format": "int32",
            "description": "Audio sampling rate in Hz"
          },
          "response_format": {
            "type": "string",
            "description": "Audio output format, such as mp3, wav, etc."
          }
        },
        "description": "Text-to-speech request parameters, containing text content and speech generation configuration"
      },
      "TypeSchema": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "child": {
            "$ref": "#/components/schemas/JsonSchema"
          },
          "valueType": {
            "type": "string"
          },
          "selections": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Type Schema definition"
      },
      "ExitSpaceOp": {
        "type": "object",
        "required": [
          "memberUid",
          "spaceCode"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "Operation user email"
          },
          "source": {
            "type": "string",
            "description": "Request source"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "Operating user ID"
          },
          "sourceId": {
            "type": "string",
            "description": "Source ID"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID"
          },
          "userName": {
            "type": "string",
            "description": "Operation user name"
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator access key"
          },
          "memberUid": {
            "type": "string",
            "description": "Member user ID to exit the space"
          },
          "spaceCode": {
            "type": "string",
            "description": "Space code to exit"
          },
          "optionalInfo": {
            "type": "object",
            "description": "Optional extension information",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "description": "Operation parameters for exiting space"
      },
      "FlashResult": {
        "type": "object",
        "properties": {
          "duration": {
            "type": "integer",
            "format": "int32"
          },
          "sentences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Sentence"
            }
          }
        }
      },
      "InputSchema": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "required": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "properties": {
            "type": "object"
          },
          "additionalProperties": {
            "type": "boolean"
          }
        }
      },
      "ModelLinkOp": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Operation user email"
          },
          "source": {
            "type": "string",
            "description": "Operation source"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "Operating user ID"
          },
          "linkedTo": {
            "type": "string",
            "description": "Target associated model name"
          },
          "sourceId": {
            "type": "string",
            "description": "Operation source ID"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID"
          },
          "userName": {
            "type": "string",
            "description": "Operation user name"
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator access key"
          },
          "modelName": {
            "type": "string",
            "description": "Source model name"
          },
          "spaceCode": {
            "type": "string",
            "description": "Space code"
          },
          "optionalInfo": {
            "type": "object",
            "description": "Optional extension information",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "description": "Model association operation parameters, for establishing linking relationships between models"
      },
      "PageModelDB": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModelDB"
            }
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "has_more": {
            "type": "boolean"
          }
        }
      },
      "RouteResult": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "Complete URL address of the target service"
          },
          "protocol": {
            "type": "string",
            "description": "Communication protocol type, such as HTTP, WebSocket, etc."
          },
          "priceInfo": {
            "type": "string",
            "description": "Pricing information JSON string, containing the billing rules of the channel"
          },
          "entityCode": {
            "type": "string",
            "description": "Entity code, corresponding to model name or endpoint identifier"
          },
          "entityType": {
            "type": "string",
            "description": "Entity type, such as MODEL or ENDPOINT"
          },
          "channelCode": {
            "type": "string",
            "description": "Channel code, unique identifier for the selected channel"
          },
          "channelInfo": {
            "type": "object",
            "description": "Channel configuration information JSON object, containing detailed protocol configuration"
          }
        },
        "description": "Routing result object, containing the complete information of the selected channel"
      },
      "CreateRoleOp": {
        "type": "object",
        "required": [
          "roles",
          "spaceCode"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "Operation user email"
          },
          "roles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateRoleDetail"
            },
            "description": "List of role details to be created"
          },
          "source": {
            "type": "string",
            "description": "Request source"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "Operating user ID"
          },
          "sourceId": {
            "type": "string",
            "description": "Source ID"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID"
          },
          "userName": {
            "type": "string",
            "description": "Operation user name"
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator access key"
          },
          "spaceCode": {
            "type": "string",
            "maxLength": 64,
            "minLength": 0,
            "description": "Space code"
          },
          "optionalInfo": {
            "type": "object",
            "description": "Optional extension information",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "description": "Space role creation operation parameters"
      },
      "FunctionCall": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "arguments": {
            "type": "string"
          }
        }
      },
      "InputMessage": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string"
          },
          "content": {
            "type": "object"
          }
        }
      },
      "ModelDetails": {
        "type": "object",
        "properties": {
          "cuid": {
            "type": "integer",
            "format": "int64",
            "description": "Creator user ID"
          },
          "muid": {
            "type": "integer",
            "format": "int64",
            "description": "Modifier user ID"
          },
          "ctime": {
            "type": "string",
            "format": "date-time",
            "description": "Creation time"
          },
          "model": {
            "$ref": "#/components/schemas/Model",
            "description": "Model basic information"
          },
          "mtime": {
            "type": "string",
            "format": "date-time",
            "description": "Modification time"
          },
          "cuName": {
            "type": "string",
            "description": "Creator user name"
          },
          "muName": {
            "type": "string",
            "description": "Modifier user name"
          },
          "channels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Channel"
            },
            "description": "List of channels associated with the model"
          }
        },
        "description": "Model details, containing basic model information and associated channels"
      },
      "OpenapiError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "param": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "httpCode": {
            "type": "integer",
            "format": "int32"
          },
          "sensitive": {
            "type": "object"
          }
        }
      },
      "PageApikeyDB": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApikeyDB"
            },
            "description": "API Key data list"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page limit"
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "description": "Total record count"
          },
          "has_more": {
            "type": "boolean",
            "description": "Whether there is more data"
          }
        },
        "description": "API Key paginated query results"
      },
      "PriceDetails": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "string"
          },
          "priceInfo": {
            "$ref": "#/components/schemas/IPriceInfo"
          },
          "displayPrice": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "RouteRequest": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string",
            "description": "Specified AI model name, used for model routing selection"
          },
          "apikey": {
            "type": "string",
            "description": "User's API key, used for authentication and permission verification"
          },
          "endpoint": {
            "type": "string",
            "description": "Target endpoint path, such as /v1/messages, /v1/embeddings, etc."
          }
        },
        "description": "Route request object, used to specify conditions for route selection"
      },
      "CreateSpaceOp": {
        "type": "object",
        "required": [
          "ownerName",
          "ownerUid",
          "spaceName"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "Operation user email"
          },
          "source": {
            "type": "string",
            "description": "Request source"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "Operating user ID"
          },
          "ownerUid": {
            "type": "string",
            "maxLength": 64,
            "minLength": 0,
            "description": "Space owner user ID"
          },
          "sourceId": {
            "type": "string",
            "description": "Source ID"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID"
          },
          "userName": {
            "type": "string",
            "description": "Operation user name"
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator access key"
          },
          "ownerName": {
            "type": "string",
            "maxLength": 64,
            "minLength": 0,
            "description": "Space owner name"
          },
          "spaceCode": {
            "type": "string",
            "maxLength": 64,
            "minLength": 0,
            "description": "Space code, automatically generated if not filled"
          },
          "spaceName": {
            "type": "string",
            "maxLength": 128,
            "minLength": 0,
            "description": "Space name"
          },
          "optionalInfo": {
            "type": "object",
            "description": "Optional extension information",
            "additionalProperties": {
              "type": "object"
            }
          },
          "spaceDescription": {
            "type": "string",
            "maxLength": 255,
            "minLength": 0,
            "description": "Space description"
          }
        },
        "description": "Operation parameters for creating space"
      },
      "ImagesRequest": {
        "type": "object",
        "required": [
          "model",
          "prompt"
        ],
        "properties": {
          "n": {
            "type": "integer",
            "format": "int32",
            "description": "Number of images to generate, must be between 1 and 10"
          },
          "seed": {
            "type": "integer",
            "format": "int32",
            "description": "Random seed value, used to control reproducibility of generation results"
          },
          "size": {
            "type": "string",
            "description": "Size specification for generated images"
          },
          "user": {
            "type": "string",
            "description": "Unique identifier representing the end user, used for monitoring and abuse detection"
          },
          "model": {
            "type": "string",
            "description": "Model name used for image generation"
          },
          "style": {
            "type": "string",
            "description": "Artistic style for image generation"
          },
          "prompt": {
            "type": "string",
            "description": "Text prompt describing the desired image, maximum length depends on the model"
          },
          "quality": {
            "type": "string",
            "description": "Quality of generated images, supports standard or hd"
          },
          "watermark": {
            "type": "boolean",
            "description": "Whether to add watermark to generated images"
          },
          "background": {
            "type": "string",
            "description": "Set background transparency for generated images, supports transparent, opaque, or auto"
          },
          "moderation": {
            "type": "string",
            "description": "Content moderation level, supports low or auto"
          },
          "output_format": {
            "type": "string",
            "description": "Output format for generated images, supports png, jpeg, or webp"
          },
          "guidance_scale": {
            "type": "number",
            "format": "float",
            "description": "Guidance scale, controls how closely the model follows the prompt"
          },
          "response_format": {
            "type": "string",
            "description": "Format for returning generated images, supports url or b64_json"
          },
          "output_compression": {
            "type": "integer",
            "format": "int32",
            "description": "Compression level for generated images, range 0-100%"
          }
        },
        "description": "Image generation request parameters"
      },
      "ModelStatusOp": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Operation user email"
          },
          "source": {
            "type": "string",
            "description": "Operation source"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "Operating user ID"
          },
          "sourceId": {
            "type": "string",
            "description": "Operation source ID"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID"
          },
          "userName": {
            "type": "string",
            "description": "Operation user name"
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator access key"
          },
          "modelName": {
            "type": "string",
            "description": "Target model name"
          },
          "spaceCode": {
            "type": "string",
            "description": "Space code"
          },
          "optionalInfo": {
            "type": "object",
            "description": "Optional extension information",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "description": "Model status operation parameters, used to activate or deactivate models"
      },
      "PageChannelDB": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelDB"
            }
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "has_more": {
            "type": "boolean"
          }
        }
      },
      "RoleWithSpace": {
        "type": "object",
        "properties": {
          "roleCode": {
            "type": "string",
            "description": "Role code"
          },
          "spaceCode": {
            "type": "string",
            "description": "Space code"
          },
          "spaceName": {
            "type": "string",
            "description": "Space name"
          }
        },
        "description": "Combined object of role and space information"
      },
      "StreamOptions": {
        "type": "object",
        "properties": {
          "include_usage": {
            "type": "boolean"
          }
        }
      },
      "ToolChoiceAny": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ToolChoice"
          }
        ]
      },
      "ApikeyCreateOp": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Display name of the API key"
          },
          "email": {
            "type": "string",
            "description": "User email address"
          },
          "paths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of API paths allowed to be accessed"
          },
          "remark": {
            "type": "string",
            "description": "Remark information"
          },
          "source": {
            "type": "string",
            "description": "Source system identifier"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "Associated user ID"
          },
          "roleCode": {
            "type": "string",
            "description": "Role code, defining the permission role of the API key"
          },
          "sourceId": {
            "type": "string",
            "description": "ID in the source system"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant identifier"
          },
          "userName": {
            "type": "string",
            "description": "User name"
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator API key"
          },
          "spaceCode": {
            "type": "string",
            "description": "Space code"
          },
          "monthQuota": {
            "type": "number",
            "description": "Monthly usage quota limit"
          },
          "parentCode": {
            "type": "string",
            "description": "Parent API key code, used for creating sub-keys"
          },
          "safetyLevel": {
            "type": "string",
            "format": "byte",
            "description": "Safety level, the higher the value, the higher the safety level"
          },
          "optionalInfo": {
            "type": "object",
            "description": "Optional extension information object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "outEntityCode": {
            "type": "string",
            "description": "External entity code, used to associate with external systems"
          }
        },
        "description": "Create API key operation parameter object"
      },
      "CreateMemberOp": {
        "type": "object",
        "required": [
          "roleCode",
          "spaceCode"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "Operation user email"
          },
          "source": {
            "type": "string",
            "description": "Request source"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "Operating user ID"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            },
            "description": "List of members to be added"
          },
          "roleCode": {
            "type": "string",
            "maxLength": 64,
            "minLength": 0,
            "description": "Role code"
          },
          "sourceId": {
            "type": "string",
            "description": "Source ID"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID"
          },
          "userName": {
            "type": "string",
            "description": "Operation user name"
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator access key"
          },
          "spaceCode": {
            "type": "string",
            "maxLength": 64,
            "minLength": 0,
            "description": "Space code"
          },
          "optionalInfo": {
            "type": "object",
            "description": "Optional extension information",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "description": "Space member creation operation parameters"
      },
      "DocParseResult": {
        "type": "object",
        "properties": {
          "path": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "tokens": {
            "type": "integer",
            "format": "int32"
          },
          "element": {
            "$ref": "#/components/schemas/Element"
          },
          "summary": {
            "type": "string"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocParseResult"
            }
          },
          "source_file": {
            "$ref": "#/components/schemas/SourceFile"
          }
        }
      },
      "ImagesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageData"
            },
            "description": "Generated image data list"
          },
          "error": {
            "$ref": "#/components/schemas/OpenapiError",
            "description": "Error information, returned when the operation fails"
          },
          "usage": {
            "$ref": "#/components/schemas/Usage",
            "description": "Token usage statistics"
          },
          "created": {
            "type": "integer",
            "format": "int64",
            "description": "Unix timestamp (seconds) when the image was created"
          },
          "background": {
            "type": "string",
            "description": "Background parameters used during image generation"
          },
          "sensitives": {
            "type": "object",
            "description": "Sensitive content detection results"
          },
          "requestRiskData": {
            "type": "object",
            "description": "Request risk assessment data"
          }
        },
        "description": "Image operation response results"
      },
      "MessageRequest": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string",
            "description": "AI model name, used to specify the specific model to use"
          },
          "tools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tool"
            },
            "description": "Available tools list, defining external tools and functions that the AI can call"
          },
          "top_k": {
            "type": "integer",
            "format": "int32",
            "description": "Top-K sampling parameter, limiting the number of candidate tokens considered at each generation step"
          },
          "top_p": {
            "type": "number",
            "format": "float",
            "description": "Top-P sampling parameter, sampling based on cumulative probability to control diversity of generated content"
          },
          "stream": {
            "type": "boolean",
            "description": "Whether to enable streaming response mode, true for streaming output, false for one-time complete results"
          },
          "system": {
            "type": "object",
            "description": "System-level configuration parameter object"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InputMessage"
            },
            "description": "Conversation message list, containing historical dialogue content between user and assistant"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata",
            "description": "Request metadata information"
          },
          "thinking": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ThinkingConfigDisabled"
              },
              {
                "$ref": "#/components/schemas/ThinkingConfigEnabled"
              }
            ],
            "description": "Thinking mode configuration, can enable or disable AI's thinking process output"
          },
          "max_tokens": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum token limit for generated responses"
          },
          "temperature": {
            "type": "number",
            "format": "float",
            "description": "Randomness control parameter for generated text, higher values result in more random content, typically ranges from 0-1"
          },
          "tool_choice": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/ToolChoiceAny"
              },
              {
                "$ref": "#/components/schemas/ToolChoiceAuto"
              },
              {
                "$ref": "#/components/schemas/ToolChoiceNone"
              },
              {
                "$ref": "#/components/schemas/ToolChoiceTool"
              }
            ],
            "description": "Tool selection strategy, controls how AI selects and uses available tools"
          },
          "stop_sequences": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Stop sequence list, stop generation when these strings are encountered"
          },
          "anthropic_version": {
            "type": "string"
          }
        },
        "description": "Message request object, used to send conversation messages and configure generation parameters to AI models"
      },
      "ModelCondition": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Page number"
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "description": "Page size"
          },
          "status": {
            "type": "string",
            "description": "Status filter condition"
          },
          "endpoint": {
            "type": "string",
            "description": "Endpoint filter condition"
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Feature filter condition list"
          },
          "orgCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Organization code list filtering criteria",
            "uniqueItems": true
          },
          "supplier": {
            "type": "string",
            "description": "Vendor filtering criteria"
          },
          "endpoints": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Endpoint list filtering criteria",
            "uniqueItems": true
          },
          "modelName": {
            "type": "string",
            "description": "Model name filtering criteria"
          },
          "ownerName": {
            "type": "string",
            "description": "Owner name filtering criteria"
          },
          "modelNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Model name list filtering criteria",
            "uniqueItems": true
          },
          "visibility": {
            "type": "string",
            "description": "Visibility filtering criteria"
          },
          "personalCode": {
            "type": "string",
            "description": "Personal code"
          },
          "dataDestination": {
            "type": "string",
            "description": "Data target filtering criteria"
          },
          "includeLinkedTo": {
            "type": "boolean",
            "description": "Whether to include associated models"
          },
          "maxInputTokensLimit": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum input token limit"
          },
          "maxOutputTokensLimit": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum output token limit"
          }
        },
        "description": "Model query conditions, supporting multiple filters and pagination parameters"
      },
      "PageCategoryDB": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryDB"
            },
            "description": "Current page category data list"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Current page number"
          },
          "limit": {
            "type": "integer",
            "format": "int32",
            "description": "Number of items per page limit"
          },
          "total": {
            "type": "integer",
            "format": "int32",
            "description": "Total record count"
          },
          "has_more": {
            "type": "boolean",
            "description": "Whether there are more data"
          }
        },
        "description": "Pagination query result, containing category data and pagination information"
      },
      "PageEndpointDB": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndpointDB"
            }
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "has_more": {
            "type": "boolean"
          }
        }
      },
      "RemoveMemberOp": {
        "type": "object",
        "required": [
          "memberUid",
          "spaceCode"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "Operation user email"
          },
          "source": {
            "type": "string",
            "description": "Request source"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "Operating user ID"
          },
          "sourceId": {
            "type": "string",
            "description": "Source ID"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID"
          },
          "userName": {
            "type": "string",
            "description": "Operation user name"
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator access key"
          },
          "memberUid": {
            "type": "string",
            "description": "Member user ID to be removed"
          },
          "spaceCode": {
            "type": "string",
            "description": "Space code"
          },
          "optionalInfo": {
            "type": "object",
            "description": "Optional extension information",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "description": "Remove space member operation parameters"
      },
      "ThinkingConfig": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ToolChoiceAuto": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ToolChoice"
          }
        ]
      },
      "ToolChoiceNone": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ToolChoice"
          }
        ]
      },
      "ToolChoiceTool": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ToolChoice"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string"
              }
            }
          }
        ]
      },
      "ApikeyCondition": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "API Key name"
          },
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Page number"
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "description": "Page size"
          },
          "status": {
            "type": "string",
            "description": "API Key status"
          },
          "orgCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Organization code list",
            "uniqueItems": true
          },
          "ownerCode": {
            "type": "string",
            "description": "Owner code"
          },
          "ownerType": {
            "type": "string",
            "description": "Owner type"
          },
          "serviceId": {
            "type": "string",
            "description": "Service ID"
          },
          "parentCode": {
            "type": "string",
            "description": "Parent API Key code"
          },
          "searchParam": {
            "type": "string",
            "description": "Search parameter, supports fuzzy search by name or service ID"
          },
          "includeChild": {
            "type": "boolean",
            "description": "Whether to include child API Key"
          },
          "personalCode": {
            "type": "string",
            "description": "Personal code"
          },
          "outEntityCode": {
            "type": "string",
            "description": "External entity code"
          }
        },
        "description": "API Key query conditions"
      },
      "ChannelCreateOp": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "Service URL address"
          },
          "email": {
            "type": "string",
            "description": "Operation user email"
          },
          "source": {
            "type": "string",
            "description": "Operation source"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "Operating user ID"
          },
          "priority": {
            "type": "string",
            "description": "Channel priority"
          },
          "protocol": {
            "type": "string",
            "description": "Communication protocol"
          },
          "sourceId": {
            "type": "string",
            "description": "Source ID"
          },
          "supplier": {
            "type": "string",
            "description": "Supplier name"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID"
          },
          "userName": {
            "type": "string",
            "description": "Operation user name"
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator API key"
          },
          "ownerCode": {
            "type": "string",
            "description": "Owner code"
          },
          "ownerName": {
            "type": "string",
            "description": "Owner name"
          },
          "ownerType": {
            "type": "string",
            "description": "Owner type"
          },
          "priceInfo": {
            "type": "string",
            "description": "Price information JSON string"
          },
          "spaceCode": {
            "type": "string",
            "description": "Space code"
          },
          "entityCode": {
            "type": "string",
            "description": "Entity code"
          },
          "entityType": {
            "type": "string",
            "description": "Entity type (endpoint or model)"
          },
          "visibility": {
            "type": "string",
            "description": "Visibility (public/private)"
          },
          "channelInfo": {
            "type": "string",
            "description": "Channel configuration information JSON string"
          },
          "optionalInfo": {
            "type": "object",
            "description": "Optional information",
            "additionalProperties": {
              "type": "object"
            }
          },
          "trialEnabled": {
            "type": "string",
            "format": "byte",
            "description": "Whether trial is enabled (0-No, 1-Yes)"
          },
          "dataDestination": {
            "type": "string",
            "description": "Data flow direction"
          }
        },
        "description": "Channel creation operation parameters"
      },
      "ChannelStatusOp": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Operation user email"
          },
          "source": {
            "type": "string",
            "description": "Operation source"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "Operating user ID"
          },
          "sourceId": {
            "type": "string",
            "description": "Source ID"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID"
          },
          "userName": {
            "type": "string",
            "description": "Operation user name"
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator API key"
          },
          "spaceCode": {
            "type": "string",
            "description": "Space code"
          },
          "channelCode": {
            "type": "string",
            "description": "Channel code"
          },
          "optionalInfo": {
            "type": "object",
            "description": "Optional information",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "description": "Channel status operation parameters"
      },
      "ChannelUpdateOp": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Operation user email"
          },
          "source": {
            "type": "string",
            "description": "Operation source"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "Operating user ID"
          },
          "priority": {
            "type": "string",
            "description": "Channel priority"
          },
          "sourceId": {
            "type": "string",
            "description": "Source ID"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID"
          },
          "userName": {
            "type": "string",
            "description": "Operation user name"
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator API key"
          },
          "priceInfo": {
            "type": "string",
            "description": "Price information JSON string"
          },
          "spaceCode": {
            "type": "string",
            "description": "Space code"
          },
          "channelCode": {
            "type": "string",
            "description": "Channel code"
          },
          "channelInfo": {
            "type": "string",
            "description": "Channel configuration information JSON string"
          },
          "optionalInfo": {
            "type": "object",
            "description": "Optional information",
            "additionalProperties": {
              "type": "object"
            }
          },
          "trialEnabled": {
            "type": "string",
            "format": "byte",
            "description": "Whether trial is enabled (0-No, 1-Yes)"
          }
        },
        "description": "Channel update operation parameters"
      },
      "DocParseRequest": {
        "type": "object",
        "properties": {
          "file": {
            "$ref": "#/components/schemas/SourceFile",
            "description": "Source file information to be parsed"
          },
          "type": {
            "type": "string",
            "description": "Parsing task type, supports task (asynchronous task) and block (synchronous blocking) two modes"
          },
          "user": {
            "type": "string",
            "description": "User identifier who initiated the parsing request"
          },
          "model": {
            "type": "string",
            "description": "AI model name specified for document parsing"
          }
        },
        "description": "Document parsing request parameters, containing the source file to be parsed and related configuration information"
      },
      "EndpointDetails": {
        "type": "object",
        "properties": {
          "models": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Model"
            }
          },
          "endpoint": {
            "type": "string"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnumDto"
            }
          },
          "priceDetails": {
            "$ref": "#/components/schemas/PriceDetails"
          }
        }
      },
      "ModelAuthorizer": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "userId": {
            "type": "integer",
            "format": "int64"
          },
          "sourceId": {
            "type": "string"
          },
          "tenantId": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "managerAk": {
            "type": "string"
          },
          "spaceCode": {
            "type": "string"
          },
          "optionalInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "authorizerCode": {
            "type": "string"
          },
          "authorizerName": {
            "type": "string"
          },
          "authorizerType": {
            "type": "string"
          }
        }
      },
      "OpenapiResponse": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/OpenapiError"
          },
          "sensitives": {
            "type": "object"
          },
          "requestRiskData": {
            "type": "object"
          }
        }
      },
      "VoiceProperties": {
        "type": "object",
        "properties": {
          "voiceTypes": {
            "type": "object",
            "description": "Voice type mapping table",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "description": "Voice property configuration"
      },
      "CategoryCreateOp": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Operation user email"
          },
          "source": {
            "type": "string",
            "description": "Operation source identifier"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "Operating user ID"
          },
          "sourceId": {
            "type": "string",
            "description": "Operation source ID"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID, used for data isolation in multi-tenant environments"
          },
          "userName": {
            "type": "string",
            "description": "Operation user name"
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator access key"
          },
          "spaceCode": {
            "type": "string",
            "description": "Space code, used to identify the space range to which the operation belongs"
          },
          "parentCode": {
            "type": "string",
            "description": "Parent category code, used to establish the hierarchical relationship of categories, empty means root category"
          },
          "categoryName": {
            "type": "string",
            "description": "Category name, length not exceeding 10 characters, must start with text"
          },
          "optionalInfo": {
            "type": "object",
            "description": "Optional additional information, used to store extended attributes",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "description": "Category creation operation request object, containing basic information required for category creation and operator information"
      },
      "CategoryStatusOp": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Operation user email"
          },
          "source": {
            "type": "string",
            "description": "Operation source identifier"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "Operating user ID"
          },
          "sourceId": {
            "type": "string",
            "description": "Operation source ID"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID, used for data isolation in multi-tenant environments"
          },
          "userName": {
            "type": "string",
            "description": "Operation user name"
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator access key"
          },
          "spaceCode": {
            "type": "string",
            "description": "Space code, used to identify the space range to which the operation belongs"
          },
          "categoryCode": {
            "type": "string",
            "description": "Category code to be operated on, used to uniquely identify the target category"
          },
          "optionalInfo": {
            "type": "object",
            "description": "Optional additional information, used to store extended attributes",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "description": "Category status operation request object, used to activate or disable categories"
      },
      "ChannelCondition": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Page number"
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "description": "Page size"
          },
          "status": {
            "type": "string",
            "description": "Channel status"
          },
          "priority": {
            "type": "string",
            "description": "Channel priority"
          },
          "protocol": {
            "type": "string",
            "description": "Communication protocol"
          },
          "supplier": {
            "type": "string",
            "description": "Supplier name"
          },
          "ownerCode": {
            "type": "string",
            "description": "Owner code"
          },
          "ownerType": {
            "type": "string",
            "description": "Owner type"
          },
          "entityCode": {
            "type": "string",
            "description": "Entity code"
          },
          "entityType": {
            "type": "string",
            "description": "Entity type (endpoint or model)"
          },
          "visibility": {
            "type": "string",
            "description": "Visibility (public/private)"
          },
          "entityCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Entity code list",
            "uniqueItems": true
          },
          "dataDestination": {
            "type": "string",
            "description": "Data flow direction"
          }
        },
        "description": "Channel query conditions"
      },
      "CreateRoleDetail": {
        "type": "object",
        "required": [
          "roleCode",
          "roleName"
        ],
        "properties": {
          "roleCode": {
            "type": "string",
            "maxLength": 64,
            "minLength": 0
          },
          "roleDesc": {
            "type": "string",
            "maxLength": 64,
            "minLength": 0
          },
          "roleName": {
            "type": "string",
            "maxLength": 64,
            "minLength": 0
          }
        }
      },
      "DocParseResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/DocParseResult",
            "description": "Document parsing specific result content, containing document structured information"
          },
          "status": {
            "type": "string",
            "description": "Parsing task status: success (success), failed (failure), processing (processing)"
          },
          "message": {
            "type": "string",
            "description": "Detailed description of the parsing status, containing error reasons when failed"
          }
        },
        "description": "Document parsing response result, containing parsing status and specific content"
      },
      "DocParseTaskInfo": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "string",
            "description": "Document parsing task identifier, used for subsequent query of parsing results"
          }
        },
        "description": "Document parsing task information, containing task identifier"
      },
      "EmbeddingRequest": {
        "type": "object",
        "properties": {
          "user": {
            "type": "string",
            "description": "User identifier, used to identify the user who initiated the request"
          },
          "input": {
            "type": "object",
            "description": "Input text for generating embedding vectors, can be a single string or an array of strings"
          },
          "model": {
            "type": "string",
            "description": "Specified embedding model name"
          },
          "dimensions": {
            "type": "integer",
            "format": "int32",
            "description": "Output embedding vector dimensions, only supported in text-embedding-3 and higher version models"
          },
          "encoding_format": {
            "type": "string",
            "description": "Embedding vector return format, optional values are float or base64, default is float"
          }
        },
        "description": "Embedding vector generation request object, containing text input to be processed and related configuration parameters"
      },
      "EndpointStatusOp": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Operating user email address"
          },
          "source": {
            "type": "string",
            "description": "Operation source identifier"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "Operating user ID"
          },
          "endpoint": {
            "type": "string",
            "description": "Endpoint address"
          },
          "sourceId": {
            "type": "string",
            "description": "Operation source ID"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant identifier"
          },
          "userName": {
            "type": "string",
            "description": "Operation user name"
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator access key"
          },
          "spaceCode": {
            "type": "string",
            "description": "Space code"
          },
          "optionalInfo": {
            "type": "object",
            "description": "Optional extension information",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "description": "Endpoint status operation parameters, used to activate or disable endpoints"
      },
      "FlashAsrResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "string",
            "description": "User identifier"
          },
          "error": {
            "$ref": "#/components/schemas/OpenapiError",
            "description": "Error information"
          },
          "task_id": {
            "type": "string",
            "description": "Task ID"
          },
          "sensitives": {
            "type": "object",
            "description": "Sensitive word detection results"
          },
          "flash_result": {
            "$ref": "#/components/schemas/FlashResult",
            "description": "Quick identification result details"
          },
          "requestRiskData": {
            "type": "object",
            "description": "Reqsuest risk data"
          }
        },
        "description": "Quick speech recognition response result"
      },
      "ApikeyMonthCostDB": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "description": "Primary key ID"
          },
          "ctime": {
            "type": "string",
            "format": "date-time",
            "description": "Creation time"
          },
          "month": {
            "type": "string",
            "description": "Month"
          },
          "mtime": {
            "type": "string",
            "format": "date-time",
            "description": "Modification time"
          },
          "akCode": {
            "type": "string",
            "description": "API Key code"
          },
          "amount": {
            "type": "number",
            "description": "Amount of cost (in fen)"
          }
        },
        "description": "API Key monthly cost record"
      },
      "CategoryCondition": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32",
            "description": "Page number, used for pagination query"
          },
          "size": {
            "type": "integer",
            "format": "int32",
            "description": "Page size, used for pagination query"
          },
          "status": {
            "type": "string",
            "description": "Category status filter condition"
          },
          "parentCode": {
            "type": "string",
            "description": "Parent category code, used to query subcategories under a specific parent category"
          },
          "topCategory": {
            "type": "boolean",
            "description": "Whether it is a top-level category, true means query top-level categories"
          },
          "categoryCode": {
            "type": "string",
            "description": "Category code, used for precise matching queries"
          },
          "categoryName": {
            "type": "string",
            "description": "Category name, used for fuzzy matching queries"
          }
        },
        "description": "Category query condition, used to filter and paginate category data"
      },
      "CompletionRequest": {
        "type": "object",
        "properties": {
          "n": {
            "type": "integer",
            "format": "int32",
            "description": "Number of candidate replies to generate"
          },
          "seed": {
            "type": "integer",
            "format": "int32",
            "description": "Random seed, used to ensure reproducible output"
          },
          "stop": {
            "type": "object",
            "description": "Stopping sequence, model stops generation when it encounters this sequence"
          },
          "user": {
            "type": "string",
            "description": "User identifier, used for tracking and rate limiting"
          },
          "model": {
            "type": "string",
            "description": "Model name to use, supports fault transfer of multiple models separated by commas"
          },
          "tools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tool"
            },
            "description": "List of available tools, containing function call definitions"
          },
          "top_p": {
            "type": "number",
            "format": "float",
            "description": "Nucleus sampling parameter, controls output diversity, range 0-1"
          },
          "stream": {
            "type": "boolean",
            "description": "Whether to enable streaming output, returns SSE stream when true"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            },
            "description": "Conversation message list, containing user and assistant's historical dialogues"
          },
          "thinking": {
            "type": "object"
          },
          "functions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Function"
            },
            "deprecated": true,
            "description": "Deprecated function definition list, recommend using tools field"
          },
          "extra_body": {
            "type": "object",
            "description": "Additional request body parameters"
          },
          "logit_bias": {
            "type": "object",
            "description": "Token bias mapping, adjust the generation probability of specific tokens",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            }
          },
          "max_tokens": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of tokens to generate"
          },
          "temperature": {
            "type": "number",
            "format": "float",
            "description": "Sampling temperature, controls output randomness, range 0-2"
          },
          "tool_choice": {
            "type": "object",
            "description": "Tool selection strategy, controls how the model selects and uses tools"
          },
          "function_call": {
            "type": "object",
            "deprecated": true,
            "description": "Deprecated function call control parameters, recommend using tool_choice"
          },
          "stream_options": {
            "$ref": "#/components/schemas/StreamOptions",
            "description": "Stream output configuration options"
          },
          "enable_thinking": {
            "type": "boolean",
            "description": "Whether to enable thinking process output"
          },
          "response_format": {
            "type": "object",
            "description": "Response format configuration, such as JSON mode"
          },
          "presence_penalty": {
            "type": "number",
            "format": "float",
            "description": "Presence penalty parameter, reduces repeated content, range -2.0 to 2.0"
          },
          "reasoning_effort": {
            "type": "object",
            "description": "Reasoning effort configuration"
          },
          "frequency_penalty": {
            "type": "number",
            "format": "float",
            "description": "Frequency penalty parameter, reduces repeated vocabulary, range -2.0 to 2.0"
          },
          "parallel_tool_calls": {
            "type": "boolean",
            "description": "Whether to allow parallel tool calls"
          }
        },
        "description": "Chat completion request object, containing model configuration, conversation messages, and various parameters"
      },
      "EndpointCondition": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string"
          },
          "endpoint": {
            "type": "string"
          },
          "endpoints": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          },
          "categoryCode": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          },
          "endpointCode": {
            "type": "string"
          },
          "endpointName": {
            "type": "string"
          },
          "maintainerCode": {
            "type": "string"
          },
          "maintainerName": {
            "type": "string"
          }
        }
      },
      "FunctionParameter": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "required": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "properties": {
            "type": "object"
          },
          "additionalProperties": {
            "type": "boolean"
          }
        }
      },
      "ImagesEditRequest": {
        "type": "object",
        "required": [
          "prompt"
        ],
        "properties": {
          "n": {
            "type": "integer",
            "format": "int32",
            "description": "Number of edited images to generate"
          },
          "size": {
            "type": "string",
            "description": "Size of edited images"
          },
          "user": {
            "type": "string",
            "description": "Unique identifier representing the end user, used for monitoring and abuse detection"
          },
          "model": {
            "type": "string",
            "description": "Model name for image editing"
          },
          "prompt": {
            "type": "string",
            "description": "Text prompt describing the desired editing effect"
          },
          "image_url": {
            "type": "string",
            "description": "URL of the image to be edited"
          },
          "image_b64_json": {
            "type": "string",
            "description": "Base64 encoded JSON format of the image to be edited"
          },
          "response_format": {
            "type": "string",
            "description": "Format of the edited image, supports url or b64_json"
          }
        },
        "description": "Image editing request parameters"
      },
      "ModelAuthorizerOp": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Operation user email"
          },
          "model": {
            "type": "string",
            "description": "Target model name"
          },
          "source": {
            "type": "string",
            "description": "Operation source"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "Operating user ID"
          },
          "sourceId": {
            "type": "string",
            "description": "Operation source ID"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID"
          },
          "userName": {
            "type": "string",
            "description": "Operation user name"
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator access key"
          },
          "spaceCode": {
            "type": "string",
            "description": "Space code"
          },
          "authorizers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModelAuthorizer"
            },
            "description": "Authorization user list",
            "uniqueItems": true
          },
          "optionalInfo": {
            "type": "object",
            "description": "Optional extension information",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "description": "Model authorization operation parameters, used to set model access permissions"
      },
      "ModelVisibilityOp": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Operation user email"
          },
          "source": {
            "type": "string",
            "description": "Operation source"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "Operating user ID"
          },
          "sourceId": {
            "type": "string",
            "description": "Operation source ID"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID"
          },
          "userName": {
            "type": "string",
            "description": "Operation user name"
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator access key"
          },
          "modelName": {
            "type": "string",
            "description": "Target model name"
          },
          "spaceCode": {
            "type": "string",
            "description": "Space code"
          },
          "optionalInfo": {
            "type": "object",
            "description": "Optional extension information",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "description": "Model visibility operation parameters, used to publish or cancel publishing models"
      },
      "SubApikeyUpdateOp": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Sub API key code to update"
          },
          "name": {
            "type": "string",
            "description": "Display name of the API key"
          },
          "paths": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Allowed API path list"
          },
          "remark": {
            "type": "string",
            "description": "Remark information"
          },
          "roleCode": {
            "type": "string",
            "description": "Role code, defining the permission role of the API key"
          },
          "monthQuota": {
            "type": "number",
            "description": "Monthly usage quota limit"
          },
          "safetyLevel": {
            "type": "string",
            "format": "byte",
            "description": "Safety level, the higher the value, the higher the safety level"
          },
          "outEntityCode": {
            "type": "string",
            "description": "External entity code, used to associate with external systems"
          }
        },
        "description": "Sub API key update operation parameters object"
      },
      "UpdateSpaceNameOp": {
        "type": "object",
        "required": [
          "spaceCode"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "Operation user email"
          },
          "source": {
            "type": "string",
            "description": "Request source"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "Operating user ID"
          },
          "sourceId": {
            "type": "string",
            "description": "Source ID"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID"
          },
          "userName": {
            "type": "string",
            "description": "Operation user name"
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator access key"
          },
          "spaceCode": {
            "type": "string",
            "description": "Space code"
          },
          "spaceName": {
            "type": "string",
            "maxLength": 128,
            "minLength": 0,
            "description": "New space name"
          },
          "optionalInfo": {
            "type": "object",
            "description": "Optional extension information",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "description": "Update space name operation parameters"
      },
      "ChangeSpaceOwnerOp": {
        "type": "object",
        "required": [
          "ownerUid",
          "spaceCode"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "Operation user email"
          },
          "source": {
            "type": "string",
            "description": "Request source"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "Operating user ID"
          },
          "ownerUid": {
            "type": "string",
            "description": "New space owner user ID"
          },
          "sourceId": {
            "type": "string",
            "description": "Source ID"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID"
          },
          "userName": {
            "type": "string",
            "description": "Operation user name"
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator access key"
          },
          "spaceCode": {
            "type": "string",
            "description": "Space code"
          },
          "optionalInfo": {
            "type": "object",
            "description": "Optional extension information",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "description": "Change space owner operation parameters"
      },
      "InputTokensDetails": {
        "type": "object",
        "properties": {
          "text_tokens": {
            "type": "integer",
            "format": "int32"
          },
          "image_tokens": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "MetricsQueryResult": {
        "type": "object",
        "properties": {
          "metrics": {
            "type": "object",
            "description": "Performance metrics data collection, containing various statistics such as error count, completion count, and request overflow count",
            "additionalProperties": {
              "type": "object"
            }
          },
          "endpoint": {
            "type": "string",
            "description": "API endpoint address"
          },
          "entityCode": {
            "type": "string",
            "description": "Entity code, may be model name or endpoint identifier"
          },
          "channelCode": {
            "type": "string",
            "description": "Channel code, used to identify specific service channels"
          }
        },
        "description": "Metrics query result, containing performance statistics data for channels"
      },
      "UpdateMemberRoleOp": {
        "type": "object",
        "required": [
          "memberUid",
          "roleCode",
          "spaceCode"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "Operation user email"
          },
          "source": {
            "type": "string",
            "description": "Request source"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "Operating user ID"
          },
          "roleCode": {
            "type": "string",
            "description": "New role code"
          },
          "sourceId": {
            "type": "string",
            "description": "Source ID"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant ID"
          },
          "userName": {
            "type": "string",
            "description": "Operation user name"
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator access key"
          },
          "memberUid": {
            "type": "string",
            "description": "Member user ID to update role"
          },
          "spaceCode": {
            "type": "string",
            "description": "Space code"
          },
          "optionalInfo": {
            "type": "object",
            "description": "Optional extension information",
            "additionalProperties": {
              "type": "object"
            }
          }
        },
        "description": "Update member role operation parameters"
      },
      "EndpointProcessData": {
        "type": "object",
        "properties": {
          "cost": {
            "type": "number",
            "description": "Request cost"
          },
          "mock": {
            "type": "boolean",
            "description": "Whether it is a mock request"
          },
          "user": {
            "type": "string",
            "description": "User identifier"
          },
          "akSha": {
            "type": "string",
            "description": "API key SHA hash value, used for authentication"
          },
          "model": {
            "type": "string",
            "description": "Model name used"
          },
          "usage": {
            "type": "object",
            "description": "Resource usage statistics, such as token usage"
          },
          "akCode": {
            "type": "string",
            "description": "API key code"
          },
          "metrics": {
            "type": "object",
            "description": "Performance metrics data, containing various statistics",
            "additionalProperties": {
              "type": "object"
            }
          },
          "private": {
            "type": "boolean",
            "description": "Whether it is a private request"
          },
          "request": {
            "type": "object",
            "description": "Original request data"
          },
          "duration": {
            "type": "integer",
            "format": "int64",
            "description": "Total request processing time"
          },
          "endpoint": {
            "type": "string",
            "description": "API endpoint path"
          },
          "innerLog": {
            "type": "boolean",
            "description": "Whether it is an internal log"
          },
          "protocol": {
            "type": "string",
            "description": "Protocol type used"
          },
          "response": {
            "$ref": "#/components/schemas/OpenapiResponse",
            "description": "API response data"
          },
          "supplier": {
            "type": "string",
            "description": "Service provider"
          },
          "priceInfo": {
            "type": "string",
            "description": "Price information"
          },
          "requestId": {
            "type": "string",
            "description": "Request unique identifier"
          },
          "apikeyInfo": {
            "$ref": "#/components/schemas/ApikeyInfo",
            "description": "API key detailed information"
          },
          "forwardUrl": {
            "type": "string",
            "description": "Forwarded target URL"
          },
          "maxWaitSec": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum wait time (seconds)"
          },
          "nativeSend": {
            "type": "boolean"
          },
          "accountCode": {
            "type": "string",
            "description": "Account code"
          },
          "accountType": {
            "type": "string",
            "description": "Account type"
          },
          "channelCode": {
            "type": "string",
            "description": "Channel code, used to identify specific service channels"
          },
          "requestTime": {
            "type": "integer",
            "format": "int64",
            "description": "Request timestamp (seconds)"
          },
          "bellaTraceId": {
            "type": "string",
            "description": "Bella system trace ID"
          },
          "encodingType": {
            "type": "string",
            "description": "Encoding type"
          },
          "parentAkCode": {
            "type": "string",
            "description": "Parent API key code"
          },
          "requestMillis": {
            "type": "integer",
            "format": "int64",
            "description": "Request timestamp (milliseconds)"
          },
          "requestRiskData": {
            "type": "object",
            "description": "Request risk data"
          },
          "channelRequestId": {
            "type": "string",
            "description": "Channel request ID"
          },
          "firstPackageTime": {
            "type": "integer",
            "format": "int64",
            "description": "First package response time (milliseconds)"
          },
          "functionCallSimulate": {
            "type": "boolean",
            "description": "Whether it is a function call simulation"
          },
          "transcriptionDuration": {
            "type": "integer",
            "format": "int64",
            "description": "Transcription duration"
          }
        },
        "description": "Endpoint processing data, used to record the complete processing process and statistics of API calls"
      },
      "EndpointCategoriesOp": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Operating user email address"
          },
          "source": {
            "type": "string",
            "description": "Operation source identifier"
          },
          "userId": {
            "type": "integer",
            "format": "int64",
            "description": "Operating user ID"
          },
          "endpoint": {
            "type": "string",
            "description": "Endpoint address"
          },
          "sourceId": {
            "type": "string",
            "description": "Operation source ID"
          },
          "tenantId": {
            "type": "string",
            "description": "Tenant identifier"
          },
          "userName": {
            "type": "string",
            "description": "Operation user name"
          },
          "managerAk": {
            "type": "string",
            "description": "Administrator access key"
          },
          "spaceCode": {
            "type": "string",
            "description": "Space code"
          },
          "optionalInfo": {
            "type": "object",
            "description": "Optional extension information",
            "additionalProperties": {
              "type": "object"
            }
          },
          "categoryCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Category code collection",
            "uniqueItems": true
          }
        },
        "description": "Endpoint category operation parameters, used to manage the association between endpoints and categories"
      },
      "EndpointCategoryTree": {
        "type": "object",
        "properties": {
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EndpointCategoryTree"
            },
            "description": "Subcategory list, forming a tree structure"
          },
          "endpoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Endpoint"
            },
            "description": "Endpoint list under this category"
          },
          "categoryCode": {
            "type": "string",
            "description": "Category code, used to uniquely identify the category"
          },
          "categoryName": {
            "type": "string",
            "description": "Category name, used as the display title of the category"
          }
        },
        "description": "Endpoint category tree structure, used to represent the hierarchical relationship and endpoints included in the category"
      },
      "AudioTranscriptionReq": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "URL address of the audio file to be transcribed"
          },
          "user": {
            "type": "string",
            "description": "User identifier"
          },
          "model": {
            "type": "string",
            "description": "Speech recognition model name to use"
          },
          "hot_word": {
            "type": "string",
            "description": "Hot word configuration, improve the accuracy of specific vocabulary recognition"
          },
          "language": {
            "type": "string",
            "description": "Audio language type"
          },
          "vocab_id": {
            "type": "string",
            "description": "Vocabulary table ID, used for custom vocabulary recognition"
          },
          "candidate": {
            "type": "integer",
            "format": "int32",
            "description": "Number of candidate results"
          },
          "eng_rlang": {
            "type": "integer",
            "format": "int32",
            "description": "English language recognition parameters"
          },
          "audio_mode": {
            "type": "string",
            "description": "Audio mode configuration"
          },
          "enable_ddc": {
            "type": "boolean"
          },
          "enable_itn": {
            "type": "boolean"
          },
          "enable_vad": {
            "type": "boolean",
            "description": "Enable speech activity detection"
          },
          "trans_mode": {
            "type": "integer",
            "format": "int32",
            "description": "Transcription mode configuration"
          },
          "eng_vad_mdn": {
            "type": "integer",
            "format": "int32",
            "description": "English speech activity detection middle value parameters"
          },
          "sample_rate": {
            "type": "integer",
            "format": "int32",
            "description": "Audio sampling rate in Hz"
          },
          "vad_segment": {
            "type": "boolean"
          },
          "callback_url": {
            "type": "string",
            "description": "Transcription completion callback notification address"
          },
          "chunk_length": {
            "type": "integer",
            "format": "int32",
            "description": "Audio chunk length"
          },
          "enable_words": {
            "type": "boolean",
            "description": "Enable word-level timestamp"
          },
          "standard_wav": {
            "type": "integer",
            "format": "int32",
            "description": "Use standard WAV format"
          },
          "language_type": {
            "type": "integer",
            "format": "int32",
            "description": "Language type encoding"
          },
          "channel_number": {
            "type": "integer",
            "format": "int32",
            "description": "Audio channel number"
          },
          "eng_collogproc": {
            "type": "boolean",
            "description": "Colloquialization processing switch"
          },
          "eng_smoothproc": {
            "type": "boolean",
            "description": "Smoothing processing switch"
          },
          "eng_vad_margin": {
            "type": "integer",
            "format": "int32",
            "description": "English speech activity detection boundary parameters"
          },
          "speaker_number": {
            "type": "integer",
            "format": "int32",
            "description": "Number of speakers"
          },
          "max_end_silence": {
            "type": "integer",
            "format": "int32",
            "description": "Maximum ending silence duration, unit milliseconds"
          },
          "show_utterances": {
            "type": "boolean"
          },
          "speaker_diarization": {
            "type": "boolean",
            "description": "Whether to enable speaker diarization functionality"
          },
          "enable_channel_split": {
            "type": "boolean"
          },
          "sensitive_words_filter": {
            "type": "string"
          },
          "enable_punctuation_prediction": {
            "type": "boolean",
            "description": "Whether to enable punctuation prediction"
          },
          "enable_semantic_sentence_detection": {
            "type": "boolean",
            "description": "Whether to enable semantic sentence detection"
          }
        },
        "description": "Audio transcription request parameters, containing audio file information and transcription configuration"
      },
      "CategoryTreeCondition": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Category status filtering criteria, used to filter categories of a specific status"
          },
          "categoryCode": {
            "type": "string",
            "description": "Category code, specifies the root category to query"
          },
          "includeEndpoint": {
            "type": "boolean",
            "description": "Whether to include endpoint information, true means including endpoint data in the tree structure"
          }
        },
        "description": "Category tree query condition, used to build the tree structure of a specific category"
      },
      "ThinkingConfigEnabled": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ThinkingConfig"
          },
          {
            "type": "object",
            "properties": {
              "budget_tokens": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ]
      },
      "AudioTranscriptionResp": {
        "type": "object",
        "properties": {
          "task_id": {
            "type": "string",
            "description": "Transcription task ID"
          }
        },
        "description": "Audio transcription task submission response"
      },
      "ImagesVariationRequest": {
        "type": "object",
        "properties": {
          "n": {
            "type": "integer",
            "format": "int32",
            "description": "Number of images to generate, must be between 1 and 10"
          },
          "size": {
            "type": "string",
            "description": "Size of generated images, supports 256x256, 512x512, or 1024x1024"
          },
          "user": {
            "type": "string",
            "description": "Unique identifier representing the end user, used for monitoring and abuse detection"
          },
          "model": {
            "type": "string",
            "description": "Model name for image variation generation"
          },
          "response_format": {
            "type": "string",
            "description": "Format for returning generated images, supports url or b64_json"
          }
        },
        "description": "Image variation generation request parameters"
      },
      "ThinkingConfigDisabled": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ThinkingConfig"
          }
        ]
      },
      "EndpointDetailsCondition": {
        "type": "object",
        "properties": {
          "endpoint": {
            "type": "string"
          },
          "features": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "modelName": {
            "type": "string"
          }
        }
      },
      "AudioTranscriptionResultReq": {
        "type": "object",
        "required": [
          "task_id"
        ],
        "properties": {
          "task_id": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of transcription task IDs to query"
          }
        },
        "description": "Query audio transcription result request parameters"
      },
      "AudioTranscriptionResultResp": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "description": "Transcription result data list"
          }
        },
        "description": "Audio transcription result response"
      }
    },
    "securitySchemes": {
      "Authorization": {
        "in": "header",
        "name": "Authorization",
        "type": "apiKey"
      }
    }
  }
}
