"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[2653],{3351:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"claude-code/integration-guide","title":"Claude Code CLI \u4ee3\u7801\u96c6\u6210\u5b8c\u6574\u653b\u7565","description":"\u76ee\u5f55","source":"@site/docs/claude-code/integration-guide.md","sourceDirName":"claude-code","slug":"/claude-code/integration-guide","permalink":"/en/docs/claude-code/integration-guide","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"documentationSidebar","previous":{"title":"Claude Code With GitHub Actions","permalink":"/en/docs/claude-code/README_GITHUB_ACTION"},"next":{"title":"Claude Code \u6280\u672f\u8c03\u7814\u4efb\u52a1\u4f7f\u7528\u6848\u4f8b\u7814\u7a76","permalink":"/en/docs/claude-code/claude-code-technical-research-case-study"}}');var o=s(4848),t=s(8453);const i={},l="Claude Code CLI \u4ee3\u7801\u96c6\u6210\u5b8c\u6574\u653b\u7565",c={},a=[{value:"\u76ee\u5f55",id:"\u76ee\u5f55",level:2},{value:"\u6982\u8ff0",id:"\u6982\u8ff0",level:2},{value:"\u4e3a\u4ec0\u4e48\u9700\u8981\u76f4\u63a5\u8c03\u7528",id:"\u4e3a\u4ec0\u4e48\u9700\u8981\u76f4\u63a5\u8c03\u7528",level:3},{value:"\u524d\u7f6e\u51c6\u5907",id:"\u524d\u7f6e\u51c6\u5907",level:2},{value:"1. \u73af\u5883\u8981\u6c42",id:"1-\u73af\u5883\u8981\u6c42",level:3},{value:"2. Node.js\u4f9d\u8d56",id:"2-nodejs\u4f9d\u8d56",level:3},{value:"3. \u7cfb\u7edf\u8981\u6c42",id:"3-\u7cfb\u7edf\u8981\u6c42",level:3},{value:"\u6838\u5fc3\u5b9e\u73b0",id:"\u6838\u5fc3\u5b9e\u73b0",level:2},{value:"\u5173\u952e\u6280\u672f\u8981\u70b9",id:"\u5173\u952e\u6280\u672f\u8981\u70b9",level:3},{value:"\u63a5\u53e3\u8bbe\u8ba1",id:"\u63a5\u53e3\u8bbe\u8ba1",level:3},{value:"\u5b8c\u6574\u4ee3\u7801",id:"\u5b8c\u6574\u4ee3\u7801",level:2},{value:"\u4f7f\u7528\u793a\u4f8b",id:"\u4f7f\u7528\u793a\u4f8b",level:2},{value:"1. \u57fa\u672c\u4f7f\u7528",id:"1-\u57fa\u672c\u4f7f\u7528",level:3},{value:"2. \u4fdd\u5b58\u5230Markdown\u6587\u4ef6",id:"2-\u4fdd\u5b58\u5230markdown\u6587\u4ef6",level:3},{value:"3. \u6279\u91cf\u5904\u7406",id:"3-\u6279\u91cf\u5904\u7406",level:3},{value:"\u6700\u4f73\u5b9e\u8df5",id:"\u6700\u4f73\u5b9e\u8df5",level:2},{value:"1. \u5de5\u4f5c\u76ee\u5f55\u7ba1\u7406",id:"1-\u5de5\u4f5c\u76ee\u5f55\u7ba1\u7406",level:3},{value:"2. \u5de5\u5177\u6743\u9650\u63a7\u5236",id:"2-\u5de5\u5177\u6743\u9650\u63a7\u5236",level:3},{value:"3. \u8d85\u65f6\u548c\u8d44\u6e90\u7ba1\u7406",id:"3-\u8d85\u65f6\u548c\u8d44\u6e90\u7ba1\u7406",level:3},{value:"4. \u9519\u8bef\u5904\u7406",id:"4-\u9519\u8bef\u5904\u7406",level:3},{value:"\u6545\u969c\u6392\u9664",id:"\u6545\u969c\u6392\u9664",level:2},{value:"\u5e38\u89c1\u95ee\u9898\u53ca\u89e3\u51b3\u65b9\u6848",id:"\u5e38\u89c1\u95ee\u9898\u53ca\u89e3\u51b3\u65b9\u6848",level:3},{value:"1. Claude CLI\u672a\u627e\u5230",id:"1-claude-cli\u672a\u627e\u5230",level:4},{value:"2. \u6743\u9650\u95ee\u9898",id:"2-\u6743\u9650\u95ee\u9898",level:4},{value:"3. Named Pipe\u521b\u5efa\u5931\u8d25",id:"3-named-pipe\u521b\u5efa\u5931\u8d25",level:4},{value:"4. jq\u547d\u4ee4\u672a\u627e\u5230",id:"4-jq\u547d\u4ee4\u672a\u627e\u5230",level:4},{value:"\u8c03\u8bd5\u6280\u5de7",id:"\u8c03\u8bd5\u6280\u5de7",level:3},{value:"1. \u542f\u7528\u8be6\u7ec6\u65e5\u5fd7",id:"1-\u542f\u7528\u8be6\u7ec6\u65e5\u5fd7",level:4},{value:"2. \u4fdd\u7559\u4e34\u65f6\u6587\u4ef6",id:"2-\u4fdd\u7559\u4e34\u65f6\u6587\u4ef6",level:4},{value:"3. \u8f93\u51fa\u5206\u6790",id:"3-\u8f93\u51fa\u5206\u6790",level:4},{value:"\u603b\u7ed3",id:"\u603b\u7ed3",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"claude-code-cli-\u4ee3\u7801\u96c6\u6210\u5b8c\u6574\u653b\u7565",children:"Claude Code CLI \u4ee3\u7801\u96c6\u6210\u5b8c\u6574\u653b\u7565"})}),"\n",(0,o.jsx)(e.h2,{id:"\u76ee\u5f55",children:"\u76ee\u5f55"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#%E6%A6%82%E8%BF%B0",children:"\u6982\u8ff0"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#%E5%89%8D%E7%BD%AE%E5%87%86%E5%A4%87",children:"\u524d\u7f6e\u51c6\u5907"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#%E6%A0%B8%E5%BF%83%E5%AE%9E%E7%8E%B0",children:"\u6838\u5fc3\u5b9e\u73b0"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81",children:"\u5b8c\u6574\u4ee3\u7801"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B",children:"\u4f7f\u7528\u793a\u4f8b"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5",children:"\u6700\u4f73\u5b9e\u8df5"})}),"\n",(0,o.jsx)(e.li,{children:(0,o.jsx)(e.a,{href:"#%E6%95%85%E9%9A%9C%E6%8E%92%E9%99%A4",children:"\u6545\u969c\u6392\u9664"})}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"\u6982\u8ff0",children:"\u6982\u8ff0"}),"\n",(0,o.jsx)(e.p,{children:"\u672c\u653b\u7565\u63d0\u4f9b\u4e86\u5728Node.js\u5e94\u7528\u4e2d\u76f4\u63a5\u8c03\u7528Claude Code CLI\u7684\u5b8c\u6574\u89e3\u51b3\u65b9\u6848\uff0c\u57fa\u4e8e\u5bf9Claude Code Base Action\u7684\u6df1\u5ea6\u5206\u6790\uff0c\u63d0\u53d6\u4e86\u6240\u6709\u6838\u5fc3\u6280\u672f\u8981\u70b9\u3002"}),"\n",(0,o.jsx)(e.h3,{id:"\u4e3a\u4ec0\u4e48\u9700\u8981\u76f4\u63a5\u8c03\u7528",children:"\u4e3a\u4ec0\u4e48\u9700\u8981\u76f4\u63a5\u8c03\u7528"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"\u7075\u6d3b\u6027"}),": \u5728\u4efb\u4f55Node.js\u73af\u5883\u4e2d\u4f7f\u7528\uff0c\u4e0d\u9650\u4e8eGitHub Actions"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"\u96c6\u6210\u6027"}),": \u53ef\u4ee5\u6574\u5408\u5230\u73b0\u6709\u7684\u5e94\u7528\u7a0b\u5e8f\u548c\u5de5\u4f5c\u6d41\u4e2d"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"\u53ef\u63a7\u6027"}),": \u5b8c\u5168\u63a7\u5236\u6267\u884c\u53c2\u6570\u3001\u8f93\u51fa\u5904\u7406\u548c\u9519\u8bef\u5904\u7406"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"\u6269\u5c55\u6027"}),": \u53ef\u4ee5\u6839\u636e\u9700\u6c42\u81ea\u5b9a\u4e49\u529f\u80fd\u548c\u8f93\u51fa\u683c\u5f0f"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"\u524d\u7f6e\u51c6\u5907",children:"\u524d\u7f6e\u51c6\u5907"}),"\n",(0,o.jsx)(e.h3,{id:"1-\u73af\u5883\u8981\u6c42",children:"1. \u73af\u5883\u8981\u6c42"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.a,{href:"/en/docs/claude-code/",children:"\u6309\u7167Claude-Code-Cli"})}),"\n",(0,o.jsx)(e.h3,{id:"2-nodejs\u4f9d\u8d56",children:"2. Node.js\u4f9d\u8d56"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-json",children:'{\n  "dependencies": {\n    "@types/node": "^20.0.0"\n  },\n  "devDependencies": {\n    "typescript": "^5.0.0"\n  }\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"3-\u7cfb\u7edf\u8981\u6c42",children:"3. \u7cfb\u7edf\u8981\u6c42"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Unix/Linux/macOS (\u652f\u6301",(0,o.jsx)(e.code,{children:"mkfifo"}),"\u547d\u4ee4)"]}),"\n",(0,o.jsx)(e.li,{children:"Node.js 18+"}),"\n",(0,o.jsxs)(e.li,{children:["\u5df2\u5b89\u88c5",(0,o.jsx)(e.code,{children:"jq"}),"\u547d\u4ee4\u884c\u5de5\u5177 (\u7528\u4e8eJSON\u5904\u7406)"]}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"\u6838\u5fc3\u5b9e\u73b0",children:"\u6838\u5fc3\u5b9e\u73b0"}),"\n",(0,o.jsx)(e.h3,{id:"\u5173\u952e\u6280\u672f\u8981\u70b9",children:"\u5173\u952e\u6280\u672f\u8981\u70b9"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"\u5de5\u4f5c\u76ee\u5f55\u7ba1\u7406"}),": Claude\u5fc5\u987b\u5728\u6b63\u786e\u7684\u9879\u76ee\u76ee\u5f55\u4e0b\u8fd0\u884c"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Named Pipes\u901a\u4fe1"}),": \u4f7f\u7528\u547d\u540d\u7ba1\u9053\u907f\u514dstdin/stdout\u590d\u6742\u6027"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"\u6d41\u5f0f\u8f93\u51fa\u5904\u7406"}),": \u5b9e\u65f6\u89e3\u6790\u7ed3\u6784\u5316JSON\u8f93\u51fa"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"\u8fdb\u7a0b\u751f\u547d\u5468\u671f\u7ba1\u7406"}),": \u8d85\u65f6\u63a7\u5236\u548c\u4f18\u96c5\u7ec8\u6b62"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"\u9519\u8bef\u5904\u7406\u548c\u8d44\u6e90\u6e05\u7406"}),": \u786e\u4fdd\u7cfb\u7edf\u7a33\u5b9a\u6027"]}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"\u63a5\u53e3\u8bbe\u8ba1",children:"\u63a5\u53e3\u8bbe\u8ba1"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"export interface ClaudeExecutionOptions {\n  prompt: string;                    // \u6267\u884c\u7684prompt\n  model?: string;                    // \u6a21\u578b\u540d\u79f0\n  maxTurns?: number;                 // \u6700\u5927\u5bf9\u8bdd\u8f6e\u6570\n  allowedTools?: string[];           // \u5141\u8bb8\u7684\u5de5\u5177\u5217\u8868\n  disallowedTools?: string[];        // \u7981\u7528\u7684\u5de5\u5177\u5217\u8868\n  systemPrompt?: string;             // \u7cfb\u7edf\u63d0\u793a\u8bcd\n  appendSystemPrompt?: string;       // \u8ffd\u52a0\u7cfb\u7edf\u63d0\u793a\u8bcd\n  mcpConfig?: string;                // MCP\u914d\u7f6e\u8def\u5f84\n  timeoutMinutes?: number;           // \u8d85\u65f6\u65f6\u95f4(\u5206\u949f)\n  outputFile?: string;               // \u8f93\u51fa\u6587\u4ef6\u8def\u5f84\n  workingDirectory?: string;         // \u5de5\u4f5c\u76ee\u5f55(\u5173\u952e!)\n}\n\nexport interface ClaudeExecutionResult {\n  success: boolean;                  // \u6267\u884c\u662f\u5426\u6210\u529f\n  exitCode: number;                  // \u9000\u51fa\u4ee3\u7801\n  output: string;                    // \u539f\u59cb\u8f93\u51fa\n  executionLog?: any[];              // \u7ed3\u6784\u5316\u6267\u884c\u65e5\u5fd7\n  outputFile?: string;               // \u8f93\u51fa\u6587\u4ef6\u8def\u5f84\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"\u5b8c\u6574\u4ee3\u7801",children:"\u5b8c\u6574\u4ee3\u7801"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"import { spawn, exec } from 'child_process';\nimport { promisify } from 'util';\nimport { writeFile, unlink, mkdir } from 'fs/promises';\nimport { createWriteStream } from 'fs';\nimport path from 'path';\n\nconst execAsync = promisify(exec);\n\nexport class ClaudeCodeRunner {\n  private tempDir: string;\n  \n  constructor(tempDir: string = '/tmp/claude-runner') {\n    this.tempDir = tempDir;\n  }\n\n  /**\n   * \u6267\u884cClaude Code\u547d\u4ee4\n   */\n  async runClaude(options: ClaudeExecutionOptions): Promise<ClaudeExecutionResult> {\n    // \u4fdd\u5b58\u539f\u59cb\u5de5\u4f5c\u76ee\u5f55\n    const originalCwd = process.cwd();\n    \n    try {\n      // 1. \u5207\u6362\u5230\u6307\u5b9a\u5de5\u4f5c\u76ee\u5f55(\u5173\u952e\u6b65\u9aa4!)\n      if (options.workingDirectory) {\n        console.log(`\ud83d\udd04 Changing to working directory: ${options.workingDirectory}`);\n        process.chdir(options.workingDirectory);\n      }\n      \n      // 2. \u786e\u4fdd\u4e34\u65f6\u76ee\u5f55\u5b58\u5728\n      await mkdir(this.tempDir, { recursive: true });\n      \n      const promptPath = path.join(this.tempDir, `prompt-${Date.now()}.txt`);\n      const pipePath = path.join(this.tempDir, `claude_pipe-${Date.now()}`);\n      const outputFile = options.outputFile || \n        path.join(this.tempDir, `claude-output-${Date.now()}.json`);\n      \n      try {\n        // 3. \u51c6\u5907prompt\u6587\u4ef6\n        await writeFile(promptPath, options.prompt);\n        console.log(`\ud83d\udcdd Prompt written to: ${promptPath}`);\n        \n        // 4. \u521b\u5efa\u547d\u540d\u7ba1\u9053\n        await this.createNamedPipe(pipePath);\n        console.log(`\ud83d\udd17 Named pipe created: ${pipePath}`);\n        \n        // 5. \u6784\u5efaClaude\u547d\u4ee4\u53c2\u6570\n        const claudeArgs = this.buildClaudeArgs(options);\n        console.log(`\u2699\ufe0f  Claude args: ${claudeArgs.join(' ')}`);\n        \n        // 6. \u6267\u884cClaude\u8fdb\u7a0b\n        const result = await this.executeClaudeProcess(\n          claudeArgs,\n          promptPath,\n          pipePath,\n          outputFile,\n          options\n        );\n        \n        return result;\n      } finally {\n        // 7. \u6e05\u7406\u4e34\u65f6\u6587\u4ef6\n        await this.cleanup([promptPath, pipePath]);\n      }\n    } finally {\n      // 8. \u6062\u590d\u539f\u59cb\u5de5\u4f5c\u76ee\u5f55\n      process.chdir(originalCwd);\n    }\n  }\n\n  /**\n   * \u521b\u5efa\u547d\u540d\u7ba1\u9053\n   */\n  private async createNamedPipe(pipePath: string): Promise<void> {\n    try {\n      await unlink(pipePath);\n    } catch (e) {\n      // \u5ffd\u7565\u6587\u4ef6\u4e0d\u5b58\u5728\u7684\u9519\u8bef\n    }\n    await execAsync(`mkfifo \"${pipePath}\"`);\n  }\n\n  /**\n   * \u6784\u5efaClaude\u547d\u4ee4\u884c\u53c2\u6570\n   */\n  private buildClaudeArgs(options: ClaudeExecutionOptions): string[] {\n    const args = ['-p', '--verbose', '--output-format', 'stream-json'];\n    \n    if (options.model) {\n      args.push('--model', options.model);\n    }\n    if (options.maxTurns) {\n      args.push('--max-turns', options.maxTurns.toString());\n    }\n    if (options.allowedTools?.length) {\n      args.push('--allowedTools', options.allowedTools.join(','));\n    }\n    if (options.disallowedTools?.length) {\n      args.push('--disallowedTools', options.disallowedTools.join(','));\n    }\n    if (options.systemPrompt) {\n      args.push('--system-prompt', options.systemPrompt);\n    }\n    if (options.appendSystemPrompt) {\n      args.push('--append-system-prompt', options.appendSystemPrompt);\n    }\n    if (options.mcpConfig) {\n      args.push('--mcp-config', options.mcpConfig);\n    }\n    \n    return args;\n  }\n\n  /**\n   * \u6267\u884cClaude\u8fdb\u7a0b\n   */\n  private async executeClaudeProcess(\n    claudeArgs: string[],\n    promptPath: string,\n    pipePath: string,\n    outputFile: string,\n    options: ClaudeExecutionOptions\n  ): Promise<ClaudeExecutionResult> {\n    return new Promise((resolve) => {\n      let output = '';\n      let resolved = false;\n      \n      console.log(`\ud83d\ude80 Starting Claude process...`);\n      \n      // \u542f\u52a8Claude\u8fdb\u7a0b - \u7ee7\u627f\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\n      const claudeProcess = spawn('claude', claudeArgs, {\n        stdio: ['pipe', 'pipe', 'inherit'],\n        // \u4e0d\u9700\u8981\u663e\u5f0f\u8bbe\u7f6ecwd\uff0c\u4f1a\u7ee7\u627fprocess.cwd()\n        env: {\n          ...process.env,\n          // \u53ef\u4ee5\u5728\u8fd9\u91cc\u6dfb\u52a0\u5176\u4ed6\u73af\u5883\u53d8\u91cf\n        }\n      });\n\n      // \u8bbe\u7f6e\u8d85\u65f6\n      const timeoutMs = (options.timeoutMinutes || 10) * 60 * 1000;\n      const timeoutId = setTimeout(() => {\n        if (!resolved) {\n          console.error(`\u23f0 Claude process timed out after ${timeoutMs / 1000} seconds`);\n          claudeProcess.kill('SIGTERM');\n          setTimeout(() => claudeProcess.kill('SIGKILL'), 5000);\n          resolved = true;\n          resolve({\n            success: false,\n            exitCode: 124,\n            output,\n            outputFile\n          });\n        }\n      }, timeoutMs);\n\n      // \u5904\u7406\u8f93\u51fa\n      claudeProcess.stdout.on('data', (data) => {\n        const text = data.toString();\n        output += text;\n        \n        // \u5b9e\u65f6\u8f93\u51fa\u5904\u7406\n        this.processStreamOutput(text);\n      });\n\n      // \u5904\u7406\u8fdb\u7a0b\u9000\u51fa\n      claudeProcess.on('close', async (code) => {\n        if (!resolved) {\n          clearTimeout(timeoutId);\n          resolved = true;\n          \n          console.log(`\u2705 Claude process completed with exit code: ${code}`);\n          \n          // \u5904\u7406\u8f93\u51fa\u5e76\u4fdd\u5b58\u5230\u6587\u4ef6\n          const executionLog = await this.processOutputToJson(output, outputFile);\n          \n          resolve({\n            success: code === 0,\n            exitCode: code || 0,\n            output,\n            executionLog,\n            outputFile\n          });\n        }\n      });\n\n      claudeProcess.on('error', (error) => {\n        if (!resolved) {\n          console.error('\u274c Claude process error:', error);\n          clearTimeout(timeoutId);\n          resolved = true;\n          resolve({\n            success: false,\n            exitCode: 1,\n            output,\n            outputFile\n          });\n        }\n      });\n\n      // \u901a\u8fc7\u547d\u540d\u7ba1\u9053\u53d1\u9001prompt\n      this.sendPromptThroughPipe(promptPath, pipePath, claudeProcess);\n    });\n  }\n\n  /**\n   * \u5904\u7406\u6d41\u5f0f\u8f93\u51fa\n   */\n  private processStreamOutput(text: string): void {\n    const lines = text.split('\\n');\n    lines.forEach((line) => {\n      if (line.trim() === '') return;\n      \n      try {\n        const parsed = JSON.parse(line);\n        console.log('\ud83d\udcca', JSON.stringify(parsed, null, 2));\n      } catch (e) {\n        console.log('\ud83d\udcdd', line);\n      }\n    });\n  }\n\n  /**\n   * \u901a\u8fc7\u547d\u540d\u7ba1\u9053\u53d1\u9001prompt\n   */\n  private async sendPromptThroughPipe(\n    promptPath: string, \n    pipePath: string, \n    claudeProcess: any\n  ): Promise<void> {\n    // \u542f\u52a8cat\u8fdb\u7a0b\u53d1\u9001prompt\u5230\u7ba1\u9053\n    const catProcess = spawn('cat', [promptPath], {\n      stdio: ['ignore', 'pipe', 'inherit']\n    });\n    \n    const pipeStream = createWriteStream(pipePath);\n    catProcess.stdout.pipe(pipeStream);\n\n    // \u4ece\u7ba1\u9053\u8bfb\u53d6\u5e76\u53d1\u9001\u5230Claude\n    const pipeProcess = spawn('cat', [pipePath]);\n    pipeProcess.stdout.pipe(claudeProcess.stdin);\n\n    // \u9519\u8bef\u5904\u7406\n    catProcess.on('error', (error) => {\n      console.error('\u274c Cat process error:', error);\n      pipeStream.destroy();\n    });\n\n    pipeProcess.on('error', (error) => {\n      console.error('\u274c Pipe process error:', error);\n      claudeProcess.kill('SIGTERM');\n    });\n  }\n\n  /**\n   * \u5904\u7406\u8f93\u51fa\u4e3aJSON\u683c\u5f0f\n   */\n  private async processOutputToJson(output: string, outputFile: string): Promise<any[]> {\n    try {\n      // \u5c06\u8f93\u51fa\u4fdd\u5b58\u5230\u4e34\u65f6\u6587\u4ef6\n      const tempFile = outputFile.replace('.json', '.txt');\n      await writeFile(tempFile, output);\n      \n      // \u4f7f\u7528jq\u5904\u7406\u4e3aJSON\u6570\u7ec4\n      const { stdout: jsonOutput } = await execAsync(`jq -s '.' \"${tempFile}\"`);\n      await writeFile(outputFile, jsonOutput);\n      \n      console.log(`\ud83d\udcbe Execution log saved to: ${outputFile}`);\n      return JSON.parse(jsonOutput);\n    } catch (e) {\n      console.warn(`\u26a0\ufe0f  Failed to process output to JSON: ${e}`);\n      return [];\n    }\n  }\n\n  /**\n   * \u6e05\u7406\u4e34\u65f6\u6587\u4ef6\n   */\n  private async cleanup(paths: string[]): Promise<void> {\n    for (const path of paths) {\n      try {\n        await unlink(path);\n      } catch (e) {\n        // \u5ffd\u7565\u6e05\u7406\u9519\u8bef\n      }\n    }\n    console.log('\ud83e\uddf9 Temporary files cleaned up');\n  }\n\n  /**\n   * \u4fbf\u6377\u65b9\u6cd5\uff1a\u5c06\u7ed3\u679c\u8f93\u51fa\u5230Markdown\u6587\u4ef6\n   */\n  async runAndSaveToMarkdown(\n    options: ClaudeExecutionOptions,\n    markdownPath: string\n  ): Promise<ClaudeExecutionResult> {\n    const result = await this.runClaude(options);\n    \n    // \u521b\u5efaMarkdown\u5185\u5bb9\n    const markdownContent = this.formatResultAsMarkdown(result, options);\n    await writeFile(markdownPath, markdownContent);\n    \n    console.log(`\ud83d\udcc4 Results saved to Markdown: ${markdownPath}`);\n    return result;\n  }\n\n  /**\n   * \u683c\u5f0f\u5316\u7ed3\u679c\u4e3aMarkdown\n   */\n  private formatResultAsMarkdown(\n    result: ClaudeExecutionResult,\n    options: ClaudeExecutionOptions\n  ): string {\n    const timestamp = new Date().toISOString();\n    \n    return `# Claude Code Execution Result\n\n## Execution Info\n- **Timestamp**: ${timestamp}\n- **Success**: ${result.success ? '\u2705' : '\u274c'}\n- **Exit Code**: ${result.exitCode}\n- **Model**: ${options.model || 'default'}\n- **Max Turns**: ${options.maxTurns || 'unlimited'}\n- **Working Directory**: ${options.workingDirectory || process.cwd()}\n\n## Prompt\n\\`\\`\\`\n${options.prompt}\n\\`\\`\\`\n\n## Output\n\\`\\`\\`\n${result.output}\n\\`\\`\\`\n\n## Execution Log\n${result.executionLog ? '```json\\n' + JSON.stringify(result.executionLog, null, 2) + '\\n```' : 'No execution log available'}\n\n---\n*Generated by Claude Code Runner at ${timestamp}*\n`;\n  }\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"\u4f7f\u7528\u793a\u4f8b",children:"\u4f7f\u7528\u793a\u4f8b"}),"\n",(0,o.jsx)(e.h3,{id:"1-\u57fa\u672c\u4f7f\u7528",children:"1. \u57fa\u672c\u4f7f\u7528"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"import { ClaudeCodeRunner } from './claude-code-runner';\n\nasync function basicExample() {\n  const runner = new ClaudeCodeRunner();\n  \n  try {\n    const result = await runner.runClaude({\n      prompt: \"\u5206\u6790\u5f53\u524d\u9879\u76ee\u7684\u7ed3\u6784\uff0c\u751f\u6210\u4e00\u4e2a\u9879\u76ee\u6982\u8ff0\",\n      model: \"claude-3-5-sonnet-20241022\",\n      maxTurns: 5,\n      allowedTools: [\"Read\", \"Glob\", \"Grep\", \"Bash\"],\n      timeoutMinutes: 15,\n      workingDirectory: process.cwd() // \u660e\u786e\u6307\u5b9a\u9879\u76ee\u76ee\u5f55\n    });\n    \n    console.log('\u2705 Execution completed:', result.success);\n    if (result.success) {\n      console.log('\ud83d\udcca Output preview:', result.output.substring(0, 500) + '...');\n    } else {\n      console.error('\u274c Execution failed with exit code:', result.exitCode);\n    }\n  } catch (error) {\n    console.error('\u274c Error:', error);\n  }\n}\n"})}),"\n",(0,o.jsx)(e.h3,{id:"2-\u4fdd\u5b58\u5230markdown\u6587\u4ef6",children:"2. \u4fdd\u5b58\u5230Markdown\u6587\u4ef6"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'async function markdownExample() {\n  const runner = new ClaudeCodeRunner();\n  \n  try {\n    const result = await runner.runAndSaveToMarkdown({\n      prompt: "\u5e2e\u6211\u4f18\u5316\u8fd9\u4e2a\u51fd\u6570\u7684\u6027\u80fd\uff0c\u5e76\u89e3\u91ca\u4f18\u5316\u539f\u7406",\n      model: "claude-3-5-sonnet-20241022",\n      systemPrompt: "\u4f60\u662f\u4e00\u4e2a\u6027\u80fd\u4f18\u5316\u4e13\u5bb6\uff0c\u4e13\u6ce8\u4e8e\u63d0\u4f9b\u8be6\u7ec6\u7684\u4ee3\u7801\u5206\u6790\u548c\u4f18\u5316\u5efa\u8bae\u3002",\n      maxTurns: 3,\n      allowedTools: ["Read", "Edit", "Grep"],\n      timeoutMinutes: 10,\n      workingDirectory: "/path/to/your/project"\n    }, \'./claude-optimization-result.md\');\n    \n    console.log(\'\ud83d\udcc4 Results saved to: ./claude-optimization-result.md\');\n  } catch (error) {\n    console.error(\'\u274c Error:\', error);\n  }\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"3-\u6279\u91cf\u5904\u7406",children:"3. \u6279\u91cf\u5904\u7406"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'async function batchProcessing() {\n  const runner = new ClaudeCodeRunner();\n  const tasks = [\n    {\n      name: "\u4ee3\u7801\u5ba1\u67e5",\n      prompt: "\u5ba1\u67e5src\u76ee\u5f55\u4e0b\u7684\u6240\u6709TypeScript\u6587\u4ef6\uff0c\u627e\u51fa\u6f5c\u5728\u95ee\u9898",\n      outputFile: "./reviews/code-review.md"\n    },\n    {\n      name: "\u6587\u6863\u751f\u6210",\n      prompt: "\u4e3a\u4e3b\u8981\u7684API\u51fd\u6570\u751f\u6210\u6587\u6863",\n      outputFile: "./docs/api-docs.md"\n    },\n    {\n      name: "\u6d4b\u8bd5\u5efa\u8bae",\n      prompt: "\u5206\u6790\u6d4b\u8bd5\u8986\u76d6\u7387\uff0c\u63d0\u4f9b\u6d4b\u8bd5\u6539\u8fdb\u5efa\u8bae",\n      outputFile: "./reports/test-suggestions.md"\n    }\n  ];\n\n  for (const task of tasks) {\n    console.log(`\ud83d\udd04 Processing: ${task.name}`);\n    \n    try {\n      const result = await runner.runAndSaveToMarkdown({\n        prompt: task.prompt,\n        model: "claude-3-5-sonnet-20241022",\n        maxTurns: 5,\n        allowedTools: ["Read", "Glob", "Grep"],\n        timeoutMinutes: 20,\n        workingDirectory: process.cwd()\n      }, task.outputFile);\n      \n      console.log(`\u2705 ${task.name} completed: ${result.success}`);\n    } catch (error) {\n      console.error(`\u274c ${task.name} failed:`, error);\n    }\n  }\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"\u6700\u4f73\u5b9e\u8df5",children:"\u6700\u4f73\u5b9e\u8df5"}),"\n",(0,o.jsx)(e.h3,{id:"1-\u5de5\u4f5c\u76ee\u5f55\u7ba1\u7406",children:"1. \u5de5\u4f5c\u76ee\u5f55\u7ba1\u7406"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'// \u2705 \u63a8\u8350\uff1a\u660e\u786e\u6307\u5b9a\u5de5\u4f5c\u76ee\u5f55\nconst result = await runner.runClaude({\n  workingDirectory: "/absolute/path/to/project",\n  // ... \u5176\u4ed6\u9009\u9879\n});\n\n// \u274c \u907f\u514d\uff1a\u4f9d\u8d56\u5f53\u524d\u76ee\u5f55\nconst result = await runner.runClaude({\n  // workingDirectory \u672a\u6307\u5b9a\n});\n'})}),"\n",(0,o.jsx)(e.h3,{id:"2-\u5de5\u5177\u6743\u9650\u63a7\u5236",children:"2. \u5de5\u5177\u6743\u9650\u63a7\u5236"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:'// \u2705 \u63a8\u8350\uff1a\u660e\u786e\u6307\u5b9a\u5141\u8bb8\u7684\u5de5\u5177\nconst result = await runner.runClaude({\n  allowedTools: ["Read", "Glob", "Grep"], // \u53ea\u8bfb\u64cd\u4f5c\n  prompt: "\u5206\u6790\u4ee3\u7801\u7ed3\u6784"\n});\n\n// \u26a0\ufe0f  \u8c28\u614e\uff1a\u5141\u8bb8\u5199\u5165\u64cd\u4f5c\nconst result = await runner.runClaude({\n  allowedTools: ["Read", "Write", "Edit", "Bash"], // \u5305\u542b\u5199\u5165\u64cd\u4f5c\n  prompt: "\u4f18\u5316\u4ee3\u7801"\n});\n'})}),"\n",(0,o.jsx)(e.h3,{id:"3-\u8d85\u65f6\u548c\u8d44\u6e90\u7ba1\u7406",children:"3. \u8d85\u65f6\u548c\u8d44\u6e90\u7ba1\u7406"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"// \u2705 \u63a8\u8350\uff1a\u8bbe\u7f6e\u5408\u7406\u7684\u8d85\u65f6\u65f6\u95f4\nconst result = await runner.runClaude({\n  timeoutMinutes: 15, // \u6839\u636e\u4efb\u52a1\u590d\u6742\u5ea6\u8c03\u6574\n  maxTurns: 5,        // \u9650\u5236\u5bf9\u8bdd\u8f6e\u6570\n});\n"})}),"\n",(0,o.jsx)(e.h3,{id:"4-\u9519\u8bef\u5904\u7406",children:"4. \u9519\u8bef\u5904\u7406"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"async function robustExecution() {\n  const runner = new ClaudeCodeRunner();\n  \n  try {\n    const result = await runner.runClaude(options);\n    \n    if (!result.success) {\n      console.error(`Claude execution failed with exit code: ${result.exitCode}`);\n      console.error(`Output: ${result.output}`);\n      return;\n    }\n    \n    // \u5904\u7406\u6210\u529f\u7ed3\u679c\n    console.log('Success!', result.output);\n    \n  } catch (error) {\n    if (error.code === 'ENOENT') {\n      console.error('\u274c Claude CLI not found. Install with: npm install -g @anthropic-ai/claude-code');\n    } else if (error.code === 'EACCES') {\n      console.error('\u274c Permission denied. Check file permissions.');\n    } else {\n      console.error('\u274c Unexpected error:', error);\n    }\n  }\n}\n"})}),"\n",(0,o.jsx)(e.h2,{id:"\u6545\u969c\u6392\u9664",children:"\u6545\u969c\u6392\u9664"}),"\n",(0,o.jsx)(e.h3,{id:"\u5e38\u89c1\u95ee\u9898\u53ca\u89e3\u51b3\u65b9\u6848",children:"\u5e38\u89c1\u95ee\u9898\u53ca\u89e3\u51b3\u65b9\u6848"}),"\n",(0,o.jsx)(e.h4,{id:"1-claude-cli\u672a\u627e\u5230",children:"1. Claude CLI\u672a\u627e\u5230"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"Error: spawn claude ENOENT\n"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"\u89e3\u51b3\u65b9\u6848"}),":"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"npm install -g @anthropic-ai/claude-code@latest\nwhich claude  # \u9a8c\u8bc1\u5b89\u88c5\u8def\u5f84\n"})}),"\n",(0,o.jsx)(e.h4,{id:"2-\u6743\u9650\u95ee\u9898",children:"2. \u6743\u9650\u95ee\u9898"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"Error: EACCES: permission denied\n"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"\u89e3\u51b3\u65b9\u6848"}),":"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# \u68c0\u67e5\u4e34\u65f6\u76ee\u5f55\u6743\u9650\nls -la /tmp/claude-runner/\nchmod 755 /tmp/claude-runner/\n\n# \u6216\u4f7f\u7528\u4e0d\u540c\u7684\u4e34\u65f6\u76ee\u5f55\nconst runner = new ClaudeCodeRunner('./temp/claude');\n"})}),"\n",(0,o.jsx)(e.h4,{id:"3-named-pipe\u521b\u5efa\u5931\u8d25",children:"3. Named Pipe\u521b\u5efa\u5931\u8d25"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"Error: mkfifo command not found\n"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"\u89e3\u51b3\u65b9\u6848"}),":"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"\u786e\u4fdd\u5728Unix/Linux/macOS\u7cfb\u7edf\u4e0a\u8fd0\u884c"}),"\n",(0,o.jsx)(e.li,{children:"Windows\u7528\u6237\u9700\u8981\u4f7f\u7528WSL\u6216Docker"}),"\n"]}),"\n",(0,o.jsx)(e.h4,{id:"4-jq\u547d\u4ee4\u672a\u627e\u5230",children:"4. jq\u547d\u4ee4\u672a\u627e\u5230"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"Error: jq: command not found\n"})}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"\u89e3\u51b3\u65b9\u6848"}),":"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# macOS\nbrew install jq\n\n# Ubuntu/Debian\nsudo apt-get install jq\n\n# CentOS/RHEL\nsudo yum install jq\n"})}),"\n",(0,o.jsx)(e.h3,{id:"\u8c03\u8bd5\u6280\u5de7",children:"\u8c03\u8bd5\u6280\u5de7"}),"\n",(0,o.jsx)(e.h4,{id:"1-\u542f\u7528\u8be6\u7ec6\u65e5\u5fd7",children:"1. \u542f\u7528\u8be6\u7ec6\u65e5\u5fd7"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"// \u5728\u73af\u5883\u53d8\u91cf\u4e2d\u542f\u7528\u8c03\u8bd5\nprocess.env.DEBUG = 'claude-runner:*';\n"})}),"\n",(0,o.jsx)(e.h4,{id:"2-\u4fdd\u7559\u4e34\u65f6\u6587\u4ef6",children:"2. \u4fdd\u7559\u4e34\u65f6\u6587\u4ef6"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"class DebugClaudeCodeRunner extends ClaudeCodeRunner {\n  private async cleanup(paths: string[]): Promise<void> {\n    console.log('\ud83d\udc1b Debug mode: Skipping cleanup');\n    console.log('\ud83d\udcc1 Temp files:', paths);\n    // \u4e0d\u5220\u9664\u4e34\u65f6\u6587\u4ef6\uff0c\u4fbf\u4e8e\u8c03\u8bd5\n  }\n}\n"})}),"\n",(0,o.jsx)(e.h4,{id:"3-\u8f93\u51fa\u5206\u6790",children:"3. \u8f93\u51fa\u5206\u6790"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-typescript",children:"const result = await runner.runClaude(options);\n\n// \u5206\u6790\u539f\u59cb\u8f93\u51fa\nconsole.log('Raw output length:', result.output.length);\nconsole.log('Exit code:', result.exitCode);\nconsole.log('Execution log entries:', result.executionLog?.length || 0);\n\n// \u4fdd\u5b58\u8c03\u8bd5\u4fe1\u606f\nawait writeFile('./debug-output.txt', result.output);\n"})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"\u603b\u7ed3",children:"\u603b\u7ed3"}),"\n",(0,o.jsx)(e.p,{children:"\u8fd9\u4e2a\u5b8c\u6574\u653b\u7565\u63d0\u4f9b\u4e86\u5728Node.js\u4e2d\u76f4\u63a5\u8c03\u7528Claude Code CLI\u7684\u6240\u6709\u5fc5\u8981\u4fe1\u606f\uff1a"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"\u6838\u5fc3\u5b9e\u73b0"}),": \u57fa\u4e8eNamed Pipes\u7684\u7a33\u5b9a\u8fdb\u7a0b\u95f4\u901a\u4fe1"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"\u5de5\u4f5c\u76ee\u5f55\u7ba1\u7406"}),": \u786e\u4fddClaude\u5728\u6b63\u786e\u7684\u9879\u76ee\u4e0a\u4e0b\u6587\u4e2d\u8fd0\u884c"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"\u5b8c\u6574\u7684\u9519\u8bef\u5904\u7406"}),": \u8d85\u65f6\u63a7\u5236\u3001\u8d44\u6e90\u6e05\u7406\u548c\u5f02\u5e38\u5904\u7406"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"\u7075\u6d3b\u7684\u8f93\u51fa\u5904\u7406"}),": \u652f\u6301\u5b9e\u65f6\u8f93\u51fa\u548c\u7ed3\u6784\u5316\u65e5\u5fd7"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"\u4fbf\u6377\u7684\u96c6\u6210\u63a5\u53e3"}),": \u6613\u4e8e\u96c6\u6210\u5230\u73b0\u6709\u5e94\u7528\u4e2d"]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"\u901a\u8fc7\u9075\u5faa\u8fd9\u4e2a\u653b\u7565\uff0c\u4f60\u53ef\u4ee5\u5728\u4efb\u4f55Node.js\u9879\u76ee\u4e2d\u7a33\u5b9a\u5730\u4f7f\u7528Claude Code\u7684\u5f3a\u5927\u529f\u80fd\u3002"})]})}function u(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>i,x:()=>l});var r=s(6540);const o={},t=r.createContext(o);function i(n){const e=r.useContext(t);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:i(n.components),r.createElement(t.Provider,{value:e},n.children)}}}]);