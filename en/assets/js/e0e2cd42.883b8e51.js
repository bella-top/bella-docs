"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[9558],{6256:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"bella-openapi/dev/login-spi","title":"SPI Login Service Integration Guide","description":"Project Architecture Overview","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/bella-openapi/dev/login-spi.md","sourceDirName":"bella-openapi/dev","slug":"/bella-openapi/dev/login-spi","permalink":"/en/docs/bella-openapi/dev/login-spi","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"documentationSidebar","previous":{"title":"Billing and Quotas: Bella OpenAPI\'s Resource Management Mechanism","permalink":"/en/docs/bella-openapi/tech/usage-manage"},"next":{"title":"Model Management Guide","permalink":"/en/docs/bella-openapi/dev/model-console"}}');var o=i(4848),r=i(8453);const s={},a="SPI Login Service Integration Guide",l={},c=[{value:"Project Architecture Overview",id:"project-architecture-overview",level:2},{value:"Authentication Methods Supported by SPI Login Service",id:"authentication-methods-supported-by-spi-login-service",level:2},{value:"1. OAuth 2.0 Login",id:"1-oauth-20-login",level:3},{value:"2. CAS Single Sign-On",id:"2-cas-single-sign-on",level:3},{value:"3. Client Mode Login",id:"3-client-mode-login",level:3},{value:"4. API Key Authentication",id:"4-api-key-authentication",level:3},{value:"Quick Integration Steps",id:"quick-integration-steps",level:2},{value:"Step 1: Enable SPI Login Functionality",id:"step-1-enable-spi-login-functionality",level:3},{value:"Step 2: Configure Login Method",id:"step-2-configure-login-method",level:3},{value:"OAuth Login Configuration Example:",id:"oauth-login-configuration-example",level:4},{value:"CAS Login Configuration Example:",id:"cas-login-configuration-example",level:4},{value:"Client Mode Configuration Example:",id:"client-mode-configuration-example",level:4},{value:"Step 3: Add Dependencies",id:"step-3-add-dependencies",level:3},{value:"Step 4: Implement User Repository Interface (Optional)",id:"step-4-implement-user-repository-interface-optional",level:3},{value:"Login Process Description",id:"login-process-description",level:2},{value:"OAuth Login Process:",id:"oauth-login-process",level:3},{value:"CAS Login Process:",id:"cas-login-process",level:3},{value:"Frontend Integration",id:"frontend-integration",level:2},{value:"Getting User Information:",id:"getting-user-information",level:3},{value:"OAuth Login:",id:"oauth-login",level:3},{value:"Logout:",id:"logout",level:3},{value:"Session Management",id:"session-management",level:2},{value:"Security Features",id:"security-features",level:3},{value:"Extending New OAuth Providers",id:"extending-new-oauth-providers",level:2},{value:"1. Extend the AbstractOAuthService class:",id:"1-extend-the-abstractoauthservice-class",level:3}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"spi-login-service-integration-guide",children:"SPI Login Service Integration Guide"})}),"\n",(0,o.jsx)(n.h2,{id:"project-architecture-overview",children:"Project Architecture Overview"}),"\n",(0,o.jsx)(n.p,{children:"Bella OpenAPI is an enterprise-level AI capability gateway that provides a complete SPI mechanism for integrating login services. The project adopts a modular design, with the SPI module located in api/spi, providing a unified login service interface."}),"\n",(0,o.jsx)(n.h2,{id:"authentication-methods-supported-by-spi-login-service",children:"Authentication Methods Supported by SPI Login Service"}),"\n",(0,o.jsx)(n.h3,{id:"1-oauth-20-login",children:"1. OAuth 2.0 Login"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Supported providers: GitHub, Google (extensible to other providers)"}),"\n",(0,o.jsx)(n.li,{children:"Configuration path: bella.oauth"}),"\n",(0,o.jsx)(n.li,{children:"Implementation location: api/spi/src/main/java/com/ke/bella/openapi/login/oauth/"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"2-cas-single-sign-on",children:"2. CAS Single Sign-On"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Protocol version: CAS 3.0"}),"\n",(0,o.jsx)(n.li,{children:"Configuration path: bella.cas"}),"\n",(0,o.jsx)(n.li,{children:"Implementation location: api/spi/src/main/java/com/ke/bella/openapi/login/cas/"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"3-client-mode-login",children:"3. Client Mode Login"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Applicable scenario: Independent frontend applications"}),"\n",(0,o.jsx)(n.li,{children:"Configuration path: bella.login.type=client"}),"\n",(0,o.jsx)(n.li,{children:"Feature: Based on HTTP session management"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"4-api-key-authentication",children:"4. API Key Authentication"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Authentication method: Authorization field in the Header"}),"\n",(0,o.jsx)(n.li,{children:"Configuration path: bella.login.authorization-header"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"quick-integration-steps",children:"Quick Integration Steps"}),"\n",(0,o.jsx)(n.h3,{id:"step-1-enable-spi-login-functionality",children:"Step 1: Enable SPI Login Functionality"}),"\n",(0,o.jsx)(n.p,{children:"Add the annotation in your Spring Boot application:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"@SpringBootApplication\n@EnableBellaLogin  // Enable Bella Login SPI\npublic class YourApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(YourApplication.class, args);\n    }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"step-2-configure-login-method",children:"Step 2: Configure Login Method"}),"\n",(0,o.jsx)(n.h4,{id:"oauth-login-configuration-example",children:"OAuth Login Configuration Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"bella:\n  login:\n    type: oauth                                    # Enable OAuth login\n    login-page-url: http://localhost:3000/login   # Login page URL\n  session:\n    cookie-name: bella_openapi_sessionId\n    max-inactive-interval: 3600                   # Session timeout (seconds)\n    cookie-domain: localhost\n  oauth:\n    client-index: http://localhost:3000           # Client homepage URL\n    redirect: http://localhost:8080               # OAuth callback base URL\n    providers:\n      github:                                     # GitHub OAuth configuration\n        enabled: true\n        client-id: ${GITHUB_CLIENT_ID}\n        client-secret: ${GITHUB_CLIENT_SECRET}\n        scope: read:user user:email\n        auth-uri: https://github.com/login/oauth/authorize\n        token-uri: https://github.com/login/oauth/access_token\n        user-info-uri: https://api.github.com/user\n      google:                                     # Google OAuth configuration\n        enabled: true\n        client-id: ${GOOGLE_CLIENT_ID}\n        client-secret: ${GOOGLE_CLIENT_SECRET}\n        scope: profile email\n        auth-uri: https://accounts.google.com/o/oauth2/v2/auth\n        token-uri: https://oauth2.googleapis.com/token\n        user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo\n"})}),"\n",(0,o.jsx)(n.h4,{id:"cas-login-configuration-example",children:"CAS Login Configuration Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"bella:\n  login:\n    type: cas                                     # Enable CAS login\n    login-page-url: http://localhost:3000/login\n  session:\n    cookie-name: bella_openapi_sessionId\n    max-inactive-interval: 3600\n  cas:\n    server-url-prefix: https://your-cas-server.com/        # CAS server URL\n    server-login-url: https://your-cas-server.com/login    # CAS login URL\n    client-host: http://localhost:8080                     # Current application address\n    client-support: true                                   # Support for SPA applications\n    client-index-url: http://localhost:3000               # Frontend homepage URL\n    use-cas-user-id: true                                 # Use CAS user ID\n    id-attribute: ucid                                    # User ID attribute name\n    name-attribute: displayName                           # Username attribute name\n    email-attribute: email                                # Email attribute name\n"})}),"\n",(0,o.jsx)(n.h4,{id:"client-mode-configuration-example",children:"Client Mode Configuration Example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"bella:\n  login:\n    type: client                                  # Client mode\n    openapi-base: http://localhost:8080          # API service address\n    login-page-url: http://localhost:3000/login\n  session:\n    cookie-name: bella_openapi_sessionId\n    max-inactive-interval: 3600\n"})}),"\n",(0,o.jsx)(n.h3,{id:"step-3-add-dependencies",children:"Step 3: Add Dependencies"}),"\n",(0,o.jsx)(n.p,{children:"Add the SPI dependency in your pom.xml:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:"  <dependency>\n      <groupId>com.ke.bella</groupId>\n      <artifactId>bella-openapi-spi</artifactId>\n      <version>${bella.version}</version>\n  </dependency>\n"})}),"\n",(0,o.jsx)(n.h3,{id:"step-4-implement-user-repository-interface-optional",children:"Step 4: Implement User Repository Interface (Optional)"}),"\n",(0,o.jsx)(n.p,{children:"If you need to customize user management, implement the IUserRepo interface:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"@Component\npublic class CustomUserRepo implements IUserRepo {\n\n      @Override\n      public Operator getBySecret(String secret) {\n          // Get user information based on the secret key\n          // Used for API Key login method\n          return null;\n      }\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"login-process-description",children:"Login Process Description"}),"\n",(0,o.jsx)(n.h3,{id:"oauth-login-process",children:"OAuth Login Process:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Frontend calls /openapi/oauth/config to get OAuth provider configuration"}),"\n",(0,o.jsx)(n.li,{children:"User selects a provider and is redirected to the OAuth authorization page"}),"\n",(0,o.jsx)(n.li,{children:"After successful authorization, callback to /openapi/oauth/callback/{provider}"}),"\n",(0,o.jsx)(n.li,{children:"System verifies the authorization code, retrieves user information, creates a session"}),"\n",(0,o.jsx)(n.li,{children:"Redirects to the target page"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"cas-login-process",children:"CAS Login Process:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"User accesses a protected resource, system checks the session"}),"\n",(0,o.jsx)(n.li,{children:"When no session exists, redirects to the CAS server login"}),"\n",(0,o.jsx)(n.li,{children:"After successful CAS authentication, returns to the application with a ticket"}),"\n",(0,o.jsx)(n.li,{children:"System verifies the ticket, extracts user information, creates a session"}),"\n",(0,o.jsx)(n.li,{children:"Redirects to the target page"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"frontend-integration",children:"Frontend Integration"}),"\n",(0,o.jsx)(n.h3,{id:"getting-user-information",children:"Getting User Information:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// Get current user information\nfetch('/openapi/userInfo')\n    .then(response => response.json())\n    .then(data => {\n        if (data.code === 200) {\n            console.log('User information:', data.data);\n        } else {\n            // User not logged in\n            window.location.href = '/login';\n        }\n    });\n"})}),"\n",(0,o.jsx)(n.h3,{id:"oauth-login",children:"OAuth Login:"}),"\n",(0,o.jsx)(n.p,{children:"For integrators who want to implement their own login page."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// Get OAuth configuration\nfetch('/openapi/oauth/config?redirect=' + encodeURIComponent(window.location.href))\n    .then(response => response.json())\n    .then(data => {\n            // data.data contains available OAuth providers and authorization URLs\n            data.data.forEach(provider => {\n            // Create login buttons that redirect to provider.authUrl when clicked\n        });\n    });\n"})}),"\n",(0,o.jsx)(n.h3,{id:"logout",children:"Logout:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"// Logout\nfetch('/openapi/logout', { method: 'POST' })\n    .then(() => {\n        window.location.href = '/login';\n    });\n"})}),"\n",(0,o.jsx)(n.h2,{id:"session-management",children:"Session Management"}),"\n",(0,o.jsx)(n.p,{children:"The system supports two types of session storage:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Redis Session (Recommended for production):","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Supports distributed deployment"}),"\n",(0,o.jsx)(n.li,{children:"Session data stored in Redis"}),"\n",(0,o.jsx)(n.li,{children:"Requires Redis connection configuration"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["HTTP Session (Suitable for client mode):","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Based on browser cookies"}),"\n",(0,o.jsx)(n.li,{children:"Suitable for single instance deployment"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"security-features",children:"Security Features"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"CSRF Protection: OAuth uses state parameter to prevent CSRF attacks"}),"\n",(0,o.jsx)(n.li,{children:"Session Management: Supports session timeout and automatic renewal"}),"\n",(0,o.jsx)(n.li,{children:"Domain Restriction: Supports configuration of allowed redirect domains"}),"\n",(0,o.jsx)(n.li,{children:"Header Authentication: Supports Authorization header authentication method"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"extending-new-oauth-providers",children:"Extending New OAuth Providers"}),"\n",(0,o.jsx)(n.h3,{id:"1-extend-the-abstractoauthservice-class",children:"1. Extend the AbstractOAuthService class:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'@Component\npublic class CustomOAuthService extends AbstractOAuthService {\n\n      @Override\n      public String getProviderType() {\n          return "custom";\n      }\n\n      @Override\n      protected Operator getUserInfo(String accessToken) {\n          // Implement logic to get user information\n          return Operator.builder()\n                  .userId(-1L)\n                  .userName("username")\n                  .email("email")\n                  .source("custom")\n                  .sourceId("provider user ID")\n                  .build();\n      }\n}\n'})}),"\n",(0,o.jsxs)(n.ol,{start:"2",children:["\n",(0,o.jsx)(n.li,{children:"Add conditional configuration annotation:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'@Bean\n@ConditionalOnProperty(prefix = "bella.oauth.providers.custom", name = "enabled", havingValue = "true")\npublic CustomOAuthService customOAuthService(OAuthProperties properties) {\n    return new CustomOAuthService(properties);\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var t=i(6540);const o={},r=t.createContext(o);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);