"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[1501],{4283:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"bella-openapi/tech/usage-manage","title":"Billing and Quotas: Bella OpenAPI\'s Resource Management Mechanism","description":"Introduction: Fine-grained Management of AI Capabilities","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/bella-openapi/tech/usage-manage.md","sourceDirName":"bella-openapi/tech","slug":"/bella-openapi/tech/usage-manage","permalink":"/en/docs/bella-openapi/tech/usage-manage","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"documentationSidebar","previous":{"title":"Identity and Permissions: Bella OpenAPI\'s Authentication and Authorization System","permalink":"/en/docs/bella-openapi/tech/user-authorization"},"next":{"title":"SPI Login Service Integration Guide","permalink":"/en/docs/bella-openapi/dev/login-spi"}}');var a=i(4848),o=i(8453);const s={},r="Billing and Quotas: Bella OpenAPI's Resource Management Mechanism",l={},c=[{value:"Introduction: Fine-grained Management of AI Capabilities",id:"introduction-fine-grained-management-of-ai-capabilities",level:2},{value:"Design Rationale of API Key Hierarchical Structure",id:"design-rationale-of-api-key-hierarchical-structure",level:2},{value:"1. Parent-Child Key Relationship",id:"1-parent-child-key-relationship",level:3},{value:"2. Quota Inheritance and Constraints",id:"2-quota-inheritance-and-constraints",level:3},{value:"3. Resource Isolation and Sharing",id:"3-resource-isolation-and-sharing",level:3},{value:"Implementation of Quota Control and Billing System",id:"implementation-of-quota-control-and-billing-system",level:2},{value:"1. Monthly Quota Management",id:"1-monthly-quota-management",level:3},{value:"2. Efficient Billing Record System",id:"2-efficient-billing-record-system",level:3},{value:"3. Multi-layer Cache Optimization",id:"3-multi-layer-cache-optimization",level:3},{value:"Monitoring and Statistics of Resource Usage",id:"monitoring-and-statistics-of-resource-usage",level:2},{value:"1. Real-time Usage Queries",id:"1-real-time-usage-queries",level:3},{value:"2. Historical Billing Queries",id:"2-historical-billing-queries",level:3},{value:"3. Differentiated Billing Models",id:"3-differentiated-billing-models",level:3},{value:"4. Warning and Automatic Control",id:"4-warning-and-automatic-control",level:3},{value:"Conclusion: The Art of Resource Management",id:"conclusion-the-art-of-resource-management",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"billing-and-quotas-bella-openapis-resource-management-mechanism",children:"Billing and Quotas: Bella OpenAPI's Resource Management Mechanism"})}),"\n",(0,a.jsx)(n.h2,{id:"introduction-fine-grained-management-of-ai-capabilities",children:"Introduction: Fine-grained Management of AI Capabilities"}),"\n",(0,a.jsx)(n.p,{children:"In enterprise-level AI application scenarios, effectively managing API resources, controlling costs, and implementing reasonable billing are important challenges facing technical teams. Bella OpenAPI provides a complete solution through its carefully designed resource management mechanism, achieving full-process management from key hierarchy, quota control to usage statistics. This article will deeply analyze Bella OpenAPI's resource management architecture, revealing how it ensures the controllability and measurability of resource usage while opening up AI capabilities."}),"\n",(0,a.jsx)(n.h2,{id:"design-rationale-of-api-key-hierarchical-structure",children:"Design Rationale of API Key Hierarchical Structure"}),"\n",(0,a.jsx)(n.p,{children:"Bella OpenAPI has designed an ingenious API Key hierarchical structure, providing a flexible and powerful foundation framework for enterprise resource management."}),"\n",(0,a.jsx)(n.h3,{id:"1-parent-child-key-relationship",children:"1. Parent-Child Key Relationship"}),"\n",(0,a.jsx)(n.p,{children:"By analyzing the source code of ApikeyService, we can see that the system implements a strict parent-child key relationship:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'@Transactional\npublic String createByParentCode(ApikeyCreateOp op) {\n ApikeyInfo apikey = EndpointContext.getApikey();\n // Verify if the current user has permission to create a child key\n if(!apikey.getCode().equals(op.getParentCode())) {\n throw new ChannelException.AuthorizationException("No operation permission");\n }\n // Verify that the child key quota does not exceed the parent key\n Assert.isTrue(op.getMonthQuota() == null || \nop.getMonthQuota().doubleValue() <= \napikey.getMonthQuota().doubleValue(), "Quota exceeds the maximum quota of the ak");\n // Verify security level constraints\n Assert.isTrue(op.getSafetyLevel() <= apikey.getSafetyLevel(), \n"Security level exceeds the highest level of the ak");\n \n // Create child key...\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"This design allows users to:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Implement multi-level resource allocation, from company to department to team or individual"}),"\n",(0,a.jsx)(n.li,{children:"Control the upper limit of resources allocated to each unit"}),"\n",(0,a.jsx)(n.li,{children:"Track resource usage by various organizational levels"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"2-quota-inheritance-and-constraints",children:"2. Quota Inheritance and Constraints"}),"\n",(0,a.jsx)(n.p,{children:"The monthly quota of child keys is strictly constrained by parent keys, ensuring the integrity of hierarchical management:"}),"\n",(0,a.jsx)(n.p,{children:"This design ensures the rationality of resource allocation, preventing a subordinate unit from occupying too many resources and affecting overall business operations."}),"\n",(0,a.jsx)(n.h3,{id:"3-resource-isolation-and-sharing",children:"3. Resource Isolation and Sharing"}),"\n",(0,a.jsx)(n.p,{children:"Through parent-child key relationships, the system cleverly balances the needs of resource isolation and sharing:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Resource isolation: Each child key has independent quotas and usage statistics, ensuring clear business boundaries"}),"\n",(0,a.jsx)(n.li,{children:"Resource sharing: Parent keys can flexibly adjust child key quotas, achieving dynamic resource allocation"}),"\n",(0,a.jsx)(n.li,{children:"Total control: The total usage of all child keys is constrained by the parent key's total quota, ensuring that the overall enterprise cost is controllable"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"implementation-of-quota-control-and-billing-system",children:"Implementation of Quota Control and Billing System"}),"\n",(0,a.jsx)(n.p,{children:"Bella OpenAPI has implemented a fine-grained quota control and billing system, which is an important guarantee for enterprise-level AI applications."}),"\n",(0,a.jsx)(n.h3,{id:"1-monthly-quota-management",children:"1. Monthly Quota Management"}),"\n",(0,a.jsx)(n.p,{children:"The system implements strict quota control through MonthQuotaInterceptor:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// ApikeyService.java\n@Value("${apikey.basic.monthQuota:200}")\nprivate int basicMonthQuota;\n// Set default quota when creating a basic key\ndb.setMonthQuota(op.getMonthQuota() == null ? \nBigDecimal.valueOf(basicMonthQuota) : op.getMonthQuota());\n// Verify quota constraints when creating a child key\nAssert.isTrue(op.getMonthQuota() == null || \nop.getMonthQuota().doubleValue() <= \napikey.getMonthQuota().doubleValue(), "Quota exceeds the maximum quota of the ak");\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'@Component\npublic class MonthQuotaInterceptor extends \nHandlerInterceptorAdapter {\n @Autowired\n private ApikeyService apikeyService;\n \n @Override\n public boolean preHandle(HttpServletRequest request, \nHttpServletResponse response, Object handler) {\n // Skip checking for asynchronous requests\n if \n(Boolean.TRUE.equals(request.getAttribute(ASYNC_REQUEST_MARKER))) \n{\n return true;\n }\n \n ApikeyInfo apikey = EndpointContext.getApikey();\n // Non-child ak or child ak with specified quota\n if(apikey.getParentInfo() == null || \napikey.getMonthQuota().doubleValue() > 0) {\n BigDecimal cost = \napikeyService.loadCost(apikey.getCode(), \nDateTimeUtils.getCurrentMonth());\n double costVal = cost.doubleValue() / 100.0;\n if(apikey.getMonthQuota().doubleValue() <= costVal) {\n String msg = "Monthly quota limit reached, limit:" + \napikey.getMonthQuota() + ", cost:" + costVal;\n throw new \nChannelException.RateLimitException(msg);\n }\n }\n \n // Parent ak\'s total quota cannot be exceeded\n if(apikey.getParentInfo() != null) {\n BigDecimal quota = \napikey.getParentInfo().getMonthQuota();\n BigDecimal cost = \napikeyService.loadCost(apikey.getParentCode(), \nDateTimeUtils.getCurrentMonth());\n double costVal = cost.doubleValue() / 100.0;\n if(quota.doubleValue() <= costVal) {\n String msg = "Main ak\'s total quota limit reached, limit:" + quota\n'})}),"\n",(0,a.jsx)(n.p,{children:"This design implements dual quota assurance:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Individual key quota control, preventing excessive use of resources at a single point"}),"\n",(0,a.jsx)(n.li,{children:"Parent key total control, ensuring overall cost controllability"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"2-efficient-billing-record-system",children:"2. Efficient Billing Record System"}),"\n",(0,a.jsx)(n.p,{children:"The system implements efficient billing records through ApikeyCostRepo:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"@Transactional\npublic void insert(String akCode, String month) {\n ApikeyMonthCostRecord rec = APIKEY_MONTH_COST.newRecord();\n rec.setAkCode(akCode);\n rec.setMonth(month);\n rec.setAmount(BigDecimal.ZERO);\n db.insertInto(APIKEY_MONTH_COST).set(rec)\n .onDuplicateKeyIgnore()\n .execute();\n}\n@Transactional\npublic void increment(String akCode, String month, BigDecimal \ncost) {\n db.update(APIKEY_MONTH_COST)\n .set(APIKEY_MONTH_COST.AMOUNT, \nAPIKEY_MONTH_COST.AMOUNT.add(cost))\n .where(APIKEY_MONTH_COST.AK_CODE.eq(akCode))\n .and(APIKEY_MONTH_COST.MONTH.eq(month))\n .execute();\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"This design has the following advantages:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Atomic operations: Using database transactions to ensure billing data consistency"}),"\n",(0,a.jsx)(n.li,{children:"Idempotent design: Avoiding duplicate records to ensure billing accuracy"}),"\n",(0,a.jsx)(n.li,{children:"Incremental recording: Using incremental updates rather than complete replacement to improve concurrent performance"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"3-multi-layer-cache-optimization",children:"3. Multi-layer Cache Optimization"}),"\n",(0,a.jsx)(n.p,{children:"To ensure performance in high-concurrency environments, the system implements a multi-layer caching strategy:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'@Cached(name = "apikey:cost:month:", key = "#akCode + \':\' + \n#month", expire = 31 * 24 * 3600,\n condition = \n"T(com.ke.bella.openapi.utils.DateTimeUtils).isCurrentMonth(#month)")\n@CachePenetrationProtect(timeout = 5)\npublic BigDecimal loadCost(String akCode, String month) {\n BigDecimal amount = apikeyCostRepo.queryCost(akCode, month);\n return amount == null ? BigDecimal.ZERO : amount;\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"This design greatly improves system performance:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Conditional caching: Using cache for current month data, directly querying historical data"}),"\n",(0,a.jsx)(n.li,{children:"Cache penetration protection: Preventing impact on the database during high concurrency"}),"\n",(0,a.jsx)(n.li,{children:"Long-term caching: 31-day cache time ensures efficient access to monthly data"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"monitoring-and-statistics-of-resource-usage",children:"Monitoring and Statistics of Resource Usage"}),"\n",(0,a.jsx)(n.p,{children:"Bella OpenAPI provides comprehensive resource monitoring and statistical functions, providing data support for enterprise management decisions."}),"\n",(0,a.jsx)(n.h3,{id:"1-real-time-usage-queries",children:"1. Real-time Usage Queries"}),"\n",(0,a.jsx)(n.p,{children:"The system supports real-time queries of current usage, allowing users to understand resource consumption:"}),"\n",(0,a.jsx)(n.p,{children:"This allows users to:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Monitor resource usage in real time"}),"\n",(0,a.jsx)(n.li,{children:"Adjust resource allocation strategies promptly"}),"\n",(0,a.jsx)(n.li,{children:"Prevent service interruptions caused by quota overruns"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"2-historical-billing-queries",children:"2. Historical Billing Queries"}),"\n",(0,a.jsx)(n.p,{children:"The system supports querying historical billing records, facilitating the analysis of long-term usage trends:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"public BigDecimal queryCost(String akCode, String month) {\n return db.select(APIKEY_MONTH_COST.AMOUNT)\n .from(APIKEY_MONTH_COST)\n .where(APIKEY_MONTH_COST.AK_CODE.eq(akCode))\n .and(APIKEY_MONTH_COST.MONTH.eq(month))\n .fetchOneInto(BigDecimal.class);\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"3-differentiated-billing-models",children:"3. Differentiated Billing Models"}),"\n",(0,a.jsx)(n.p,{children:"Bella OpenAPI's resource recording mechanism supports implementing differentiated billing models:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Internal cost center: Allocating quotas to different departments for internal cost accounting"}),"\n",(0,a.jsx)(n.li,{children:"External billing mode: Creating independent keys for external customers, charging based on actual usage"}),"\n",(0,a.jsx)(n.li,{children:"Hybrid mode: Fixed quotas for core business, pay-as-you-go for peripheral business"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Implementation suggestions:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Set different resource prices based on cost differences of different AI models"}),"\n",(0,a.jsx)(n.li,{children:"Consider differentiated pricing for peak and off-peak periods"}),"\n",(0,a.jsx)(n.li,{children:"Provide resource package discounts for long-term stable customers"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"4-warning-and-automatic-control",children:"4. Warning and Automatic Control"}),"\n",(0,a.jsx)(n.p,{children:"Based on Bella OpenAPI's quota control mechanism, enterprises can implement warning and automatic control strategies:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Threshold warning: Issue warnings when usage reaches 80% of the quota"}),"\n",(0,a.jsx)(n.li,{children:"Automatic expansion: Automatically increase temporary quotas for critical business when thresholds are reached"}),"\n",(0,a.jsx)(n.li,{children:"Intelligent degradation: Automatically degrade non-critical requests to lower-cost services when resources are tight"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Implementation suggestions:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Establish a multi-level warning mechanism, from reminders to severe warnings"}),"\n",(0,a.jsx)(n.li,{children:"Preset resource expansion approval processes to ensure quick response"}),"\n",(0,a.jsx)(n.li,{children:"Develop business priority strategies for resource-constrained situations"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"conclusion-the-art-of-resource-management",children:"Conclusion: The Art of Resource Management"}),"\n",(0,a.jsx)(n.p,{children:"Bella OpenAPI's billing and quota system demonstrates profound insights into enterprise-level resource management: resource management is not just a technical issue, but the art of balancing control and flexibility. Through carefully designed hierarchical key structures, rigorous quota control mechanisms, efficient billing record systems, and comprehensive monitoring and statistical functions, Bella OpenAPI provides enterprises with an all-round resource management solution."}),"\n",(0,a.jsx)(n.p,{children:"In today's rapidly developing AI technology, Bella OpenAPI's resource management mechanism enables enterprises to achieve precise control of resources and effective management of costs while opening up AI capabilities. Whether it's resource allocation within large enterprises or commercial operations of AI service providers, Bella OpenAPI provides battle-tested solutions."}),"\n",(0,a.jsx)(n.p,{children:"When using Bella OpenAPI, you should fully utilize its resource management features, combine them with your business characteristics, and develop reasonable resource allocation strategies and monitoring mechanisms to achieve sustainable application and development of AI capabilities."}),"\n",(0,a.jsx)(n.p,{children:"If you are interested in Bella OpenAPI's resource management mechanism, you are welcome to visit the GitHub repository to study its implementation details in depth, or experience the power of this system firsthand through the online demo version."})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>r});var t=i(6540);const a={},o=t.createContext(a);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);